import React, { useState, useEffect, useMemo, useRef } from 'react';
import { Link } from 'react-router-dom';
import { BookOpen, PenTool, Headphones, Mic, Trophy, BarChart3, Clock, CheckCircle, Play, Pause, RotateCcw, Square } from 'lucide-react';
import { auth } from './services/auth';
import TestEvaluation from './components/TestEvaluation';

// Logo imports
import headerLogo from './assets/ieltsgoyazi.png';
import kitapLogo from './assets/ieltsgokitap.png';

const GeneralTestPage: React.FC = () => {
  const [currentStep, setCurrentStep] = useState(0);
  const [testStarted, setTestStarted] = useState(false);
  const [testCompleted, setTestCompleted] = useState(false);
  const [timeLeft, setTimeLeft] = useState(0);
  const [isPaused, setIsPaused] = useState(false);
  
  // Auth states
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState<any>(null);
  
  // Auth check
  useEffect(() => {
    const checkAuth = () => {
      const user = auth.getCurrentUser();
      if (user) {
        setIsAuthenticated(true);
        setUser(user);
      } else {
        setIsAuthenticated(false);
        setUser(null);
        // General test i√ßin auth zorunlu deƒüil, sadece uyarƒ± g√∂ster
      }
    };

    checkAuth();
  }, []);

  const handleLogout = () => {
    auth.logout();
    setIsAuthenticated(false);
    setUser(null);
    window.location.href = '/';
  };
  
  // Listening mod√ºl√º i√ßin ek state'ler
  const [listeningTestStarted, setListeningTestStarted] = useState(false);
  const [listeningContent, setListeningContent] = useState<any>(null);
  const [currentSection, setCurrentSection] = useState(0);
  const [isAudioPlaying, setIsAudioPlaying] = useState(false);
  const [showTranscript, setShowTranscript] = useState(false);
  const [answers, setAnswers] = useState<{[key: string]: string}>({});

  // Reading mod√ºl√º i√ßin durumlar
  const [readingTests, setReadingTests] = useState<any[]>([]);
  const [readingSelectedId, setReadingSelectedId] = useState<string>('');
  const [readingTest, setReadingTest] = useState<any | null>(null);
  const [readingLoading, setReadingLoading] = useState<boolean>(false);
  const [readingError, setReadingError] = useState<string>('');
  const [readingAnswers, setReadingAnswers] = useState<Record<string, string>>({});
  const [readingResult, setReadingResult] = useState<any | null>(null);
  const [currentReadingPassage, setCurrentReadingPassage] = useState<number>(0);

  // Speaking mod√ºl√º i√ßin durumlar (IELTS formatƒ±)
  const [speakingTestStarted, setSpeakingTestStarted] = useState<boolean>(false);
  const [speakingPart, setSpeakingPart] = useState<number>(1); // 1,2,3
  const [currentSpeakingQuestion, setCurrentSpeakingQuestion] = useState<number>(0);
  const [speakingQuestions, setSpeakingQuestions] = useState<{
    part1: { question: string; audioUrl?: string }[];
    part2: { topic: string; bullets: string[]; audioUrl?: string };
    part3: { question: string; audioUrl?: string }[];
  }>({
    part1: [],
    part2: { topic: '', bullets: [] },
    part3: []
  });
  const [speakingAnswers, setSpeakingAnswers] = useState<{
    part1: string[];
    part2: string;
    part3: string[];
  }>({
    part1: ['', '', '', ''],
    part2: '',
    part3: ['', '', '']
  });
  const [isRecording, setIsRecording] = useState<boolean>(false);
  const [isProcessingSpeech, setIsProcessingSpeech] = useState<boolean>(false);
  const [speakingError, setSpeakingError] = useState<string>('');
  const [speakingLoading, setSpeakingLoading] = useState<boolean>(false);
  const [speakingEvaluation, setSpeakingEvaluation] = useState<any>(null);
  const [speakingEvaluating, setSpeakingEvaluating] = useState<boolean>(false);
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const audioChunksRef = useRef<Blob[]>([]);
  
  // ƒ∞nteraktif Speaking i√ßin yeni state'ler (gelecekte kullanƒ±labilir)
  // const [conversationHistory, setConversationHistory] = useState<Array<{
  //   part: number;
  //   question: string;
  //   answer: string;
  //   questionNumber: number;
  // }>>([]);
  const [isInteractiveMode] = useState<boolean>(false); // Backend'den sorularƒ± al
  // const [questionsPerPart] = useState<number>(4); // Her part'ta 4 soru
  // const audioRefs = useRef<{ [key: string]: HTMLAudioElement }>({});

  // Genel deneme sonu√ßlarƒ± i√ßin state'ler
  const [generalTestResults, setGeneralTestResults] = useState<{
    reading: number;
    listening: number;
    writing: number;
    speaking: number;
    overall: number;
    detailedEvaluation: string;
    moduleEvaluations: {
      reading: { score: number; feedback: string };
      listening: { score: number; feedback: string };
      writing: { score: number; feedback: string };
      speaking: { score: number; feedback: string };
    };
  } | null>(null);
  const [isEvaluatingGeneralTest, setIsEvaluatingGeneralTest] = useState<boolean>(false);
  const [showDetailedEvaluation, setShowDetailedEvaluation] = useState<boolean>(false);
  const [showTestEvaluation, setShowTestEvaluation] = useState<boolean>(false);
  const [listeningResult, setListeningResult] = useState<any>(null);
  
  // Mod√ºl tamamlanma durumlarƒ±
  const [moduleCompletion, setModuleCompletion] = useState<{
    reading: boolean;
    writing: boolean;
    speaking: boolean;
    listening: boolean;
  }>({
    reading: false,
    writing: false,
    speaking: false,
    listening: false
  });
  // Speaking test ba≈ülatma fonksiyonu
  const startSpeakingTest = async () => {
    try {
      setSpeakingLoading(true);
      setSpeakingError('');
      
      // Cache kontrol√º - aynƒ± test zaten olu≈üturulmu≈ü mu?
      const cacheKey = 'speaking_test_initial';
      const cachedTest = localStorage.getItem(cacheKey);
      if (cachedTest) {
        console.log('üì¶ Cache\'den speaking test y√ºkleniyor...');
        const testData = JSON.parse(cachedTest);
        setSpeakingQuestions(testData);
        setSpeakingTestStarted(true);
        setSpeakingPart(1);
        setCurrentSpeakingQuestion(0);
        // setConversationHistory([]);
        return;
      }
      
      if (isInteractiveMode) {
        // ƒ∞nteraktif mod - sadece ilk sorularƒ± olu≈ütur
        const initialQuestions = {
          part1: [
            { question: "What's your name?", audioUrl: '' },
            { question: "Where are you from?", audioUrl: '' },
            { question: "What do you do for work?", audioUrl: '' },
            { question: "Do you like your job?", audioUrl: '' }
          ],
          part2: { 
            topic: "Describe a memorable trip you took", 
            bullets: ["Where did you go?", "Who did you go with?", "What did you do there?", "Why was it memorable?"],
            audioUrl: ''
          },
          part3: [
            { question: "How has technology changed the way people travel?", audioUrl: '' },
            { question: "What are the benefits of traveling to different countries?", audioUrl: '' },
            { question: "Do you think tourism has more positive or negative effects?", audioUrl: '' },
            { question: "How important is it to learn about other cultures?", audioUrl: '' }
          ]
        };
        
        // ƒ∞lk sorular i√ßin ses dosyalarƒ± olu≈ütur
        console.log('üîä ƒ∞lk sorular i√ßin ses dosyalarƒ± olu≈üturuluyor...');
        const questionsWithAudio = await generateAudioForQuestions(initialQuestions);
        
        // Ses dosyalarƒ± olu≈üturulduktan sonra state'i set et
        setSpeakingQuestions(questionsWithAudio);
        setSpeakingTestStarted(true);
        setSpeakingPart(1);
        setCurrentSpeakingQuestion(0);
        // setConversationHistory([]);
        
        // Cache'e kaydet (ses dosyalarƒ± ile birlikte)
        localStorage.setItem(cacheKey, JSON.stringify(questionsWithAudio));
        console.log('üíæ Speaking test cache\'e kaydedildi');
      } else {
        // Eski mod - t√ºm sorularƒ± olu≈ütur
        const response = await fetch('http://localhost:8005/generate-test', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            part1_count: 4,
            part3_count: 3,
            difficulty: 'intermediate'
          })
        });
        
        if (!response.ok) {
          const errorText = await response.text();
          console.error('Speaking test generation error:', errorText);
          throw new Error(`Test olu≈üturma hatasƒ±: ${response.status} - ${errorText}`);
        }
        
        const data = await response.json();
        setSpeakingQuestions(data);
        setSpeakingTestStarted(true);
        setSpeakingPart(1);
        setCurrentSpeakingQuestion(0);
        
        // Sorular i√ßin ses dosyalarƒ± olu≈ütur
        const questionsWithAudio = await generateAudioForQuestions(data);
        
        // Cache'e kaydet (ses dosyalarƒ± ile birlikte)
        localStorage.setItem(cacheKey, JSON.stringify(questionsWithAudio));
        console.log('üíæ Speaking test cache\'e kaydedildi');
      }
      
    } catch (error: any) {
      setSpeakingError(error.message || 'Test olu≈üturma hatasƒ±');
    } finally {
      setSpeakingLoading(false);
    }
  };

  // ƒ∞nteraktif soru-cevap fonksiyonu (gelecekte kullanƒ±labilir)
  // const getNextInteractiveQuestion = async (userAnswer: string) => { ... }

  // Sorular i√ßin ses dosyalarƒ± olu≈ütur ve g√ºncellenmi≈ü questions objesini d√∂nd√ºr
  const generateAudioForQuestions = async (questions: any) => {
    try {
      const updatedQuestions = { ...questions };
      
      // Part 1 sorularƒ± i√ßin ses olu≈ütur
      for (let i = 0; i < questions.part1.length; i++) {
        console.log(`üîä Part 1 soru ${i+1} i√ßin ses olu≈üturuluyor:`, questions.part1[i].question);
        const audioUrl = await generateAudio(questions.part1[i].question);
        console.log(`‚úÖ Part 1 soru ${i+1} ses URL'si:`, audioUrl ? 'Ba≈üarƒ±lƒ±' : 'Ba≈üarƒ±sƒ±z');
        updatedQuestions.part1[i] = { ...questions.part1[i], audioUrl: audioUrl || '' };
      }
      
      // Part 2 i√ßin ses olu≈ütur
      const part2Text = `Topic: ${questions.part2.topic}. ${questions.part2.bullets.join('. ')}`;
      console.log(`üîä Part 2 i√ßin ses olu≈üturuluyor:`, part2Text.substring(0, 50) + '...');
      const part2AudioUrl = await generateAudio(part2Text);
      console.log(`‚úÖ Part 2 ses URL'si:`, part2AudioUrl ? 'Ba≈üarƒ±lƒ±' : 'Ba≈üarƒ±sƒ±z');
      updatedQuestions.part2 = { ...questions.part2, audioUrl: part2AudioUrl || '' };
      
      // Part 3 sorularƒ± i√ßin ses olu≈ütur
      for (let i = 0; i < questions.part3.length; i++) {
        console.log(`üîä Part 3 soru ${i+1} i√ßin ses olu≈üturuluyor:`, questions.part3[i].question);
        const audioUrl = await generateAudio(questions.part3[i].question);
        console.log(`‚úÖ Part 3 soru ${i+1} ses URL'si:`, audioUrl ? 'Ba≈üarƒ±lƒ±' : 'Ba≈üarƒ±sƒ±z');
        updatedQuestions.part3[i] = { ...questions.part3[i], audioUrl: audioUrl || '' };
      }
      
      return updatedQuestions;
    } catch (error) {
      console.error('Audio generation error:', error);
      return questions; // Hata durumunda orijinal questions'ƒ± d√∂nd√ºr
    }
  };

  // Text'i ses'e √ßevir
  const generateAudio = async (text: string): Promise<string | null> => {
    try {
      console.log('üîä TTS API √ßaƒürƒ±sƒ± ba≈ülatƒ±lƒ±yor:', text.substring(0, 50) + '...');
      const response = await fetch('http://localhost:8005/text-to-speech', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          text: text,
          voice_id: 'EXAVITQu4vr4xnSDxMaL' // Bella voice
        })
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå TTS API hatasƒ±:', response.status, errorText);
        throw new Error(`TTS API error: ${response.status} - ${errorText}`);
      }
      
      const data = await response.json();
      console.log('‚úÖ TTS API\'den ses alƒ±ndƒ±');
      return `data:audio/mpeg;base64,${data.audio_data}`;
    } catch (error) {
      console.error('‚ùå TTS error:', error);
      return null; // Bo≈ü string yerine null d√∂nd√ºr
    }
  };

  // Yeni speaking kayƒ±t fonksiyonlarƒ±
  const startSpeakingRecording = async () => {
    try {
      setSpeakingError('');
      audioChunksRef.current = [];
      const stream = await navigator.mediaDevices.getUserMedia({
        audio: { echoCancellation: true, noiseSuppression: true, autoGainControl: true }
      });
      mediaRecorderRef.current = new MediaRecorder(stream);
      mediaRecorderRef.current.ondataavailable = (e) => {
        if (e.data.size > 0) audioChunksRef.current.push(e.data);
      };
      mediaRecorderRef.current.onstop = () => {
        stream.getTracks().forEach(track => track.stop());
        processSpeakingAudio();
      };
      
      mediaRecorderRef.current.start();
      setIsRecording(true);
    } catch (e: any) {
      setSpeakingError(e?.message || 'Mikrofon eri≈üim hatasƒ±');
    }
  };

  const stopSpeakingRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
    }
  };

  const processSpeakingAudio = () => {
    try {
      if (audioChunksRef.current.length === 0) throw new Error('Ses yakalanamadƒ±');
      
      const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });
      const reader = new FileReader();
      reader.onload = async () => {
        try {
          const base64Audio = (reader.result as string).split(',')[1];
          
          const response = await fetch('http://localhost:8005/speech-to-text', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ audio_data: base64Audio, format: 'webm' })
          });
          
          if (!response.ok) {
            throw new Error(`STT API error: ${response.status}`);
          }
          
          const data = await response.json();
          const text = (data.text || '').trim();
          
          if (!text) {
            throw new Error('Bo≈ü metin');
          }

          // Yeni state sistemi ile g√ºncelleme
          if (speakingPart === 1) {
            setSpeakingAnswers(prev => ({
              ...prev,
              part1: prev.part1.map((answer, i) => 
                i === currentSpeakingQuestion ? text : answer
              )
            }));
          } else if (speakingPart === 2) {
            setSpeakingAnswers(prev => ({
              ...prev,
              part2: prev.part2 + (prev.part2 ? ' ' : '') + text
            }));
          } else if (speakingPart === 3) {
            setSpeakingAnswers(prev => ({
              ...prev,
              part3: prev.part3.map((answer, i) => 
                i === currentSpeakingQuestion ? text : answer
              )
            }));
          }
          
        } catch (err: any) {
          setSpeakingError(err?.message || 'STT hata');
        } finally {
          setIsProcessingSpeech(false);
        }
      };
      reader.readAsDataURL(audioBlob);
    } catch (e: any) {
      setSpeakingError(e?.message || 'Ses i≈üleme hatasƒ±');
      setIsProcessingSpeech(false);
    }
  };

  // Speaking deƒüerlendirme fonksiyonu
  const evaluateSpeakingTest = async () => {
    try {
      setSpeakingEvaluating(true);
      setSpeakingError('');
      
      // Cache kontrol√º - aynƒ± cevaplar zaten deƒüerlendirilmi≈ü mi?
      const cacheKey = `speaking_result_${JSON.stringify(speakingAnswers).slice(0, 100)}`;
      const cachedResult = localStorage.getItem(cacheKey);
      if (cachedResult) {
        console.log('üì¶ Cache\'den speaking sonucu y√ºkleniyor...');
        setSpeakingEvaluation(JSON.parse(cachedResult));
        setSpeakingEvaluating(false);
        return;
      }
      
      const response = await fetch('http://localhost:8005/evaluate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          part1_answers: speakingAnswers.part1,
          part2_answer: speakingAnswers.part2,
          part3_answers: speakingAnswers.part3,
          questions: speakingQuestions
        })
      });
      
      if (!response.ok) {
        throw new Error(`Deƒüerlendirme hatasƒ±: ${response.status}`);
      }
      
      const evaluation = await response.json();
      console.log('‚úÖ API\'den speaking sonucu alƒ±ndƒ±:', evaluation);
      setSpeakingEvaluation(evaluation);
      
      // Cache'e kaydet
      localStorage.setItem(cacheKey, JSON.stringify(evaluation));
      console.log('üíæ Speaking sonucu cache\'e kaydedildi');
      
    } catch (error: any) {
      setSpeakingError(error.message || 'Deƒüerlendirme hatasƒ±');
    } finally {
      setSpeakingEvaluating(false);
    }
  };

  // Writing mod√ºl√º i√ßin durumlar
  const [writingMode, setWritingMode] = useState<string>('academic'); // academic | general
  // const [, setWritingTask] = useState<string>('task1'); // task1 | task2
  const [writingTopics, setWritingTopics] = useState<{[key: string]: string}>({});
  const [writingEssays, setWritingEssays] = useState<{[key: string]: string}>({});
  const [writingResults, setWritingResults] = useState<{[key: string]: any}>({});
  const [writingLoading, setWritingLoading] = useState<boolean>(false);
  const [writingError, setWritingError] = useState<string>('');
  const [currentWritingTask, setCurrentWritingTask] = useState<number>(0);
  const steps = useMemo(() => [
    { 
      name: 'Listening', 
      duration: 30, // dakika
      questions: 40,
      description: 'Dinleme b√∂l√ºm√º - 4 b√∂l√ºm, 40 soru'
    },
    { 
      name: 'Reading', 
      duration: 60, 
      questions: 40,
      description: 'Okuma b√∂l√ºm√º - 3 metin, 40 soru'
    },
    { 
      name: 'Writing', 
      duration: 60, 
      tasks: 2,
      description: 'Yazma b√∂l√ºm√º - 2 g√∂rev'
    },
    { 
      name: 'Speaking', 
      duration: 15, 
      parts: 3,
      description: 'Konu≈üma b√∂l√ºm√º - 3 b√∂l√ºm'
    }
  ], []);

  const totalDuration = steps.reduce((total, step) => total + step.duration, 0);

  // Timer effect
  useEffect(() => {
    let interval: NodeJS.Timeout;
    
    if (testStarted && !testCompleted && !isPaused && timeLeft > 0) {
      interval = setInterval(() => {
        setTimeLeft(prev => {
          if (prev <= 1) {
            // S√ºre bitti, otomatik olarak sonraki mod√ºle ge√ß
            if (currentStep < steps.length - 1) {
              setCurrentStep(prev => prev + 1);
              return steps[currentStep + 1].duration * 60; // Yeni mod√ºl s√ºresi
            } else {
              // T√ºm mod√ºller bitti
              setTestCompleted(true);
              return 0;
            }
          }
          return prev - 1;
        });
      }, 1000);
    }

    return () => clearInterval(interval);
  }, [testStarted, testCompleted, isPaused, timeLeft, currentStep, steps]);

  // Sƒ±nav tamamlandƒ±ysa sonu√ß sayfasƒ±nƒ± g√∂ster
  useEffect(() => {
    // Bu effect yalnƒ±zca sonu√ß ekranƒ±na ilk giri≈üte bir kez √ßalƒ±≈üsƒ±n
    if (!testCompleted) return;
    
    const onceKey = 'general_test_saved_once';
    if (sessionStorage.getItem(onceKey)) return;
    sessionStorage.setItem(onceKey, '1');
    // Basit placeholder skorlar: Reading sonucu varsa kullan, diƒüerleri 0
    const estimatedReading = readingResult?.band_estimate || 0;
    completeGeneralMockAndSave({ reading: Number(estimatedReading) || 0 });
  }, [testCompleted, readingResult?.band_estimate]);

  const startTest = () => {
    setTestStarted(true);
    setCurrentStep(0);
    setTimeLeft(steps[0].duration * 60); // ƒ∞lk mod√ºl s√ºresi (saniye)
    setTestCompleted(false);
    setIsPaused(false);
  };

  const pauseTest = () => {
    setIsPaused(!isPaused);
  };

  const resetTest = () => {
    setTestStarted(false);
    setTestCompleted(false);
    setCurrentStep(0);
    setTimeLeft(0);
    setIsPaused(false);
    setShowDetailedEvaluation(false);
    setShowTestEvaluation(false);
    
    // T√ºm mod√ºl durumlarƒ±nƒ± sƒ±fƒ±rla
    setModuleCompletion({
      listening: false,
      reading: false,
      writing: false,
      speaking: false
    });
    
    // Reading mod√ºl√º durumlarƒ±nƒ± sƒ±fƒ±rla
    setReadingTest(null);
    setReadingAnswers({});
    setReadingResult(null);
    setReadingError('');
    setCurrentReadingPassage(0);
    
    // Writing mod√ºl√º durumlarƒ±nƒ± sƒ±fƒ±rla
    setWritingTopics({});
    setWritingEssays({});
    setWritingResults({});
    setWritingError('');
    setCurrentWritingTask(0);
    
    // Speaking mod√ºl√º durumlarƒ±nƒ± sƒ±fƒ±rla
    setSpeakingTestStarted(false);
    setSpeakingPart(1);
    setCurrentSpeakingQuestion(0);
    setSpeakingQuestions({ part1: [], part2: { topic: '', bullets: [] }, part3: [] });
    setSpeakingAnswers({ part1: [], part2: '', part3: [] });
    setSpeakingEvaluation(null);
    setSpeakingError('');
    setSpeakingEvaluating(false);
    
    // Cache'i temizle
    clearTestCache();
  };

  // Cache temizleme fonksiyonu
  const clearTestCache = () => {
    const keysToRemove = [];
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && (
        key.startsWith('reading_result_') ||
        key.startsWith('reading_test_') ||
        key.startsWith('listening_test_') ||
        key.startsWith('writing_result_') ||
        key.startsWith('writing_topics_') ||
        key.startsWith('speaking_result_') ||
        key.startsWith('speaking_test_') ||
        key.startsWith('dashboard_save_')
      )) {
        keysToRemove.push(key);
      }
    }
    keysToRemove.forEach(key => localStorage.removeItem(key));
    console.log('üóëÔ∏è Test cache temizlendi:', keysToRemove.length, '√∂ƒüe');
  };

  // Genel deneme bittiƒüinde puanƒ± kaydet ve streak g√ºncelle
  const completeGeneralMockAndSave = async (bands: { reading?: number; writing?: number; listening?: number; speaking?: number }) => {
    try {
      const token = localStorage.getItem('token');
      if (!token) return;
      const resp = await fetch('http://localhost:8000/api/complete-general-test', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
        body: JSON.stringify({
          reading_band: bands.reading,
          writing_band: bands.writing,
          listening_band: bands.listening,
          speaking_band: bands.speaking,
          detailed: { source: 'general_test_page' }
        })
      });
      if (!resp.ok) return;
      const data = await resp.json();
      console.log('‚úÖ Genel deneme kaydedildi:', data);
    } catch (e) {
      console.warn('Genel deneme kaydetme hatasƒ±:', e);
    }
  };

  // Genel deneme i√ßin detaylƒ± IELTS deƒüerlendirmesi
  const evaluateGeneralTest = async () => {
    try {
      setIsEvaluatingGeneralTest(true);
      
      // Mevcut sonu√ßlarƒ± topla
      const results = {
        reading: readingResult?.band_estimate || 0,
        listening: 0, // Listening hen√ºz implement edilmedi
        writing: 0, // Writing hen√ºz implement edilmedi
        speaking: speakingEvaluation?.overall_band || 0
      };

      // Overall skor hesapla
      const overall = (results.reading + results.listening + results.writing + results.speaking) / 4;

      // AI ile detaylƒ± deƒüerlendirme yap
      const evaluationPrompt = `
        IELTS Genel Deneme Deƒüerlendirmesi yapƒ±n. Kullanƒ±cƒ±nƒ±n sonu√ßlarƒ±:
        
        Reading: ${results.reading}/9
        Listening: ${results.listening}/9 (hen√ºz test edilmedi)
        Writing: ${results.writing}/9 (hen√ºz test edilmedi)
        Speaking: ${results.speaking}/9
        
        Overall Band Score: ${overall.toFixed(1)}/9
        
        L√ºtfen a≈üaƒüƒ±daki formatta detaylƒ± deƒüerlendirme yapƒ±n:
        
        {
          "detailed_evaluation": "Genel deƒüerlendirme metni...",
          "module_evaluations": {
            "reading": {
              "score": ${results.reading},
              "feedback": "Reading mod√ºl√º i√ßin detaylƒ± geri bildirim..."
            },
            "listening": {
              "score": ${results.listening},
              "feedback": "Listening mod√ºl√º i√ßin detaylƒ± geri bildirim..."
            },
            "writing": {
              "score": ${results.writing},
              "feedback": "Writing mod√ºl√º i√ßin detaylƒ± geri bildirim..."
            },
            "speaking": {
              "score": ${results.speaking},
              "feedback": "Speaking mod√ºl√º i√ßin detaylƒ± geri bildirim..."
            }
          },
          "recommendations": [
            "√ñneri 1: Reading i√ßin...",
            "√ñneri 2: Speaking i√ßin...",
            "√ñneri 3: Genel geli≈üim i√ßin..."
          ]
        }
        
        T√ºrk√ße yanƒ±t verin ve IELTS band score sistemine uygun deƒüerlendirme yapƒ±n.
      `;

      // AI deƒüerlendirmesi i√ßin backend'e istek g√∂nder
      const response = await fetch('http://localhost:8005/evaluate-general-test', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          results: results,
          overall_score: overall,
          evaluation_prompt: evaluationPrompt
        })
      });

      if (response.ok) {
        const evaluation = await response.json();
        setGeneralTestResults({
          reading: results.reading,
          listening: results.listening,
          writing: results.writing,
          speaking: results.speaking,
          overall: overall,
          detailedEvaluation: evaluation.detailed_evaluation || 'Detaylƒ± deƒüerlendirme hazƒ±rlanƒ±yor...',
          moduleEvaluations: evaluation.module_evaluations || {
            reading: { score: results.reading, feedback: 'Reading mod√ºl√º deƒüerlendirmesi hazƒ±rlanƒ±yor...' },
            listening: { score: results.listening, feedback: 'Listening mod√ºl√º hen√ºz test edilmedi.' },
            writing: { score: results.writing, feedback: 'Writing mod√ºl√º hen√ºz test edilmedi.' },
            speaking: { score: results.speaking, feedback: 'Speaking mod√ºl√º deƒüerlendirmesi hazƒ±rlanƒ±yor...' }
          }
        });
        setShowDetailedEvaluation(true);
      } else {
        // Fallback: Basit deƒüerlendirme
        setGeneralTestResults({
          reading: results.reading,
          listening: results.listening,
          writing: results.writing,
          speaking: results.speaking,
          overall: overall,
          detailedEvaluation: `IELTS Genel Deneme Sonucunuz: ${overall.toFixed(1)}/9. Reading: ${results.reading}, Speaking: ${results.speaking}. Diƒüer mod√ºller hen√ºz tamamlanmadƒ±.`,
          moduleEvaluations: {
            reading: { score: results.reading, feedback: `Reading mod√ºl√ºnde ${results.reading}/9 puan aldƒ±nƒ±z.` },
            listening: { score: results.listening, feedback: 'Listening mod√ºl√º hen√ºz test edilmedi.' },
            writing: { score: results.writing, feedback: 'Writing mod√ºl√º hen√ºz test edilmedi.' },
            speaking: { score: results.speaking, feedback: `Speaking mod√ºl√ºnde ${results.speaking}/9 puan aldƒ±nƒ±z.` }
          }
        });
        setShowDetailedEvaluation(true);
      }

    } catch (error) {
      console.error('Genel deneme deƒüerlendirme hatasƒ±:', error);
      // Hata durumunda basit sonu√ß g√∂ster
      setGeneralTestResults({
        reading: readingResult?.band_estimate || 0,
        listening: 0,
        writing: 0,
        speaking: speakingEvaluation?.overall_band || 0,
        overall: ((readingResult?.band_estimate || 0) + (speakingEvaluation?.overall_band || 0)) / 2,
        detailedEvaluation: 'Deƒüerlendirme hazƒ±rlanƒ±rken bir hata olu≈ütu.',
        moduleEvaluations: {
          reading: { score: readingResult?.band_estimate || 0, feedback: 'Reading mod√ºl√º deƒüerlendirmesi.' },
          listening: { score: 0, feedback: 'Listening mod√ºl√º hen√ºz test edilmedi.' },
          writing: { score: 0, feedback: 'Writing mod√ºl√º hen√ºz test edilmedi.' },
          speaking: { score: speakingEvaluation?.overall_band || 0, feedback: 'Speaking mod√ºl√º deƒüerlendirmesi.' }
        }
      });
      setShowDetailedEvaluation(true);
    } finally {
      setIsEvaluatingGeneralTest(false);
    }
  };

  const nextStep = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
      setTimeLeft(steps[currentStep + 1].duration * 60);
    }
  };

  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
      setTimeLeft(steps[currentStep - 1].duration * 60);
    }
  };

  const formatTime = (seconds: number) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    
    if (hours > 0) {
      return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }
    return `${minutes}:${secs.toString().padStart(2, '0')}`;
  };

  const getProgressPercentage = () => {
    if (!testStarted) return 0;
    const completedTime = steps.slice(0, currentStep).reduce((total, step) => total + step.duration * 60, 0);
    const currentStepTime = steps[currentStep].duration * 60;
    const usedTime = currentStepTime - timeLeft;
    const totalUsedTime = completedTime + usedTime;
    return (totalUsedTime / (totalDuration * 60)) * 100;
  };

  // Writing konu √ºretme fonksiyonu
  const generateWritingTopic = async (taskKey: string) => {
    try {
      setWritingLoading(true);
      
      console.log(`üîÑ API'den ${taskKey} konusu √ºretiliyor...`);
      const response = await fetch(`http://localhost:8002/topic?mode=${writingMode}&task=${taskKey}`);
      if (response.ok) {
        const data = await response.json();
        console.log(`‚úÖ API'den ${taskKey} konusu alƒ±ndƒ±:`, data.topic);
        setWritingTopics(prev => ({ ...prev, [taskKey]: data.topic }));
        return data.topic;
      } else {
        setWritingError('Konu √ºretimi ba≈üarƒ±sƒ±z.');
        return null;
      }
    } catch (e: any) {
      setWritingError('Konu √ºretimi hatasƒ±: ' + e.message);
      return null;
    } finally {
      setWritingLoading(false);
    }
  };

  // Writing essay deƒüerlendirme fonksiyonu
  const evaluateWriting = async (taskKey: string) => {
    const essay = writingEssays[taskKey];
    if (!essay || essay.trim().length < 50) {
      setWritingError('L√ºtfen en az 50 kelimelik bir essay yazƒ±n.');
      return;
    }

    // Cache kontrol√º - aynƒ± essay zaten deƒüerlendirilmi≈ü mi?
    const cacheKey = `writing_result_${taskKey}_${essay.slice(0, 100)}`;
    const cachedResult = localStorage.getItem(cacheKey);
    if (cachedResult) {
      console.log('üì¶ Cache\'den writing sonucu y√ºkleniyor...');
      setWritingResults(prev => ({ ...prev, [taskKey]: JSON.parse(cachedResult) }));
      return;
    }

    try {
      setWritingLoading(true);
      const response = await fetch('http://localhost:8002/evaluate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          essay: essay,
          topic: writingTopics[taskKey],
          mode: writingMode,
          task: taskKey
        })
      });

      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ API\'den writing sonucu alƒ±ndƒ±:', data);
        setWritingResults(prev => ({ ...prev, [taskKey]: data }));
        
        // Cache'e kaydet
        localStorage.setItem(cacheKey, JSON.stringify(data));
        console.log('üíæ Writing sonucu cache\'e kaydedildi');
      } else {
        const errorData = await response.text();
        setWritingError('Deƒüerlendirme ba≈üarƒ±sƒ±z: ' + errorData);
      }
    } catch (e: any) {
      setWritingError('Deƒüerlendirme hatasƒ±: ' + e.message);
    } finally {
      setWritingLoading(false);
    }
  };

  // Writing test ba≈ülatma fonksiyonu
  const startWritingTest = async () => {
    setWritingError('');
    setWritingTopics({});
    setWritingEssays({});
    setWritingResults({});
    setCurrentWritingTask(0);
    
    // Cache kontrol√º - aynƒ± writing konularƒ± zaten olu≈üturulmu≈ü mu?
    const cacheKey = `writing_topics_${writingMode}`;
    const cachedTopics = localStorage.getItem(cacheKey);
    if (cachedTopics) {
      console.log('üì¶ Cache\'den writing konularƒ± y√ºkleniyor...');
      const topicsData = JSON.parse(cachedTopics);
      setWritingTopics(topicsData);
      return;
    }
    
    // Her iki task i√ßin de konu √ºret
    const task1Topic = await generateWritingTopic('task1');
    const task2Topic = await generateWritingTopic('task2');
    
    // Konular √ºretildikten sonra cache'e kaydet
    if (task1Topic && task2Topic) {
      const topicsData = {
        task1: task1Topic,
        task2: task2Topic
      };
      localStorage.setItem(cacheKey, JSON.stringify(topicsData));
      console.log('üíæ Writing konularƒ± cache\'e kaydedildi');
    }
  };

  // Reading test ba≈ülatma fonksiyonu
  const startReadingTest = async () => {
    setReadingLoading(true);
    setReadingError('');
    setReadingResult(null);
    setReadingAnswers({});
    setCurrentReadingPassage(0);
    
    // Cache kontrol√º - aynƒ± reading test zaten olu≈üturulmu≈ü mu?
    const cacheKey = 'reading_test_academic';
    const cachedTest = localStorage.getItem(cacheKey);
    if (cachedTest) {
      console.log('üì¶ Cache\'den reading test y√ºkleniyor...');
      const testData = JSON.parse(cachedTest);
      setReadingTest(testData);
      setReadingLoading(false);
      return;
    }
    
    try {
      console.log('üîÑ API\'den reading testi √ºretiliyor...');
      
      // Token'ƒ± al
      const token = localStorage.getItem('token');
      
      const response = await fetch('http://localhost:8001/generate-ielts-academic', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          ...(token && { 'Authorization': `Bearer ${token}` })
        },
        body: JSON.stringify({ 
          topic: 'Academic', 
          difficulty: 'Medium',
          format: 'ielts_academic',
          passages: 3,
          total_questions: 40
        })
      });

      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ API\'den reading testi alƒ±ndƒ±:', data.id);
        
        setReadingTest(data);
        setReadingSelectedId(data.id);
        
        // Cache'e kaydet
        localStorage.setItem(cacheKey, JSON.stringify(data));
        console.log('üíæ Reading test cache\'e kaydedildi');
        
        // Test listesine ekle
        setReadingTests(prev => {
          const exists = prev.find(p => p.id === data.id);
          return exists ? prev : [data, ...prev];
        });
      } else {
        const err = await response.text();
        console.error('‚ùå Reading test √ºretimi ba≈üarƒ±sƒ±z:', err);
        setReadingError(err || 'AI test √ºretimi ba≈üarƒ±sƒ±z.');
      }
      } catch (e: any) {
      console.error('‚ùå Reading test √ºretim hatasƒ±:', e);
      setReadingError(e?.message || 'AI test √ºretim hatasƒ±');
      } finally {
        setReadingLoading(false);
      }
    };

  // Se√ßili testi getir
  useEffect(() => {
    if (!readingSelectedId) return;
    const load = async () => {
      try {
        setReadingLoading(true);
        setReadingResult(null);
        setReadingAnswers({});
        // √ñnce backend
        let data: any | null = null;
        try {
          const r = await fetch(`http://localhost:8001/tests/${readingSelectedId}`);
          if (r.ok) data = await r.json();
        } catch {}
        if (!data) {
          const fallback = readingTests.find(t => t.id === readingSelectedId);
          data = fallback || null;
        }
        setReadingTest(data);
      } finally {
        setReadingLoading(false);
      }
    };
    load();
  }, [readingSelectedId, readingTests]);

  const setReadingAnswer = (qid: string, val: string) => {
    setReadingAnswers(prev => ({ ...prev, [qid]: val }));
  };

  const submitReading = async () => {
    if (!readingTest) return;
    
    // Cache kontrol√º - aynƒ± test zaten deƒüerlendirilmi≈ü mi?
    const cacheKey = `reading_result_${readingSelectedId}`;
    const cachedResult = localStorage.getItem(cacheKey);
    if (cachedResult) {
      console.log('üì¶ Cache\'den reading sonucu y√ºkleniyor...');
      setReadingResult(JSON.parse(cachedResult));
      return;
    }
    
    try {
      setReadingLoading(true);
      console.log('üîç Deƒüerlendirme ba≈ülƒ±yor...');
      console.log('üìã Test ID:', readingSelectedId);
      console.log('üìù Cevaplar:', readingAnswers);
      
      // Token'ƒ± al
      const token = localStorage.getItem('token');
      
      const res = await fetch('http://localhost:8001/submit', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          ...(token && { 'Authorization': `Bearer ${token}` })
        },
        body: JSON.stringify({ 
          test_id: readingSelectedId, 
          answers: readingAnswers,
          test_data: readingTest  // Test verisini de g√∂nder
        })
      });
      
      console.log('üìä Response status:', res.status);
      
      if (res.ok) {
        const data = await res.json();
        console.log('‚úÖ API\'den reading sonucu alƒ±ndƒ±:', data);
        setReadingResult(data);
        
        // Cache'e kaydet
        localStorage.setItem(cacheKey, JSON.stringify(data));
        console.log('üíæ Reading sonucu cache\'e kaydedildi');
      } else {
        const errorText = await res.text();
        console.error('‚ùå Deƒüerlendirme hatasƒ±:', res.status, errorText);
        setReadingError(`Deƒüerlendirme ba≈üarƒ±sƒ±z oldu: ${res.status} - ${errorText}`);
      }
    } catch (e: any) {
      console.error('‚ùå Deƒüerlendirme exception:', e);
      setReadingError(e?.message || 'Deƒüerlendirme hatasƒ±');
    } finally {
      setReadingLoading(false);
    }
  };


  // Listening test ba≈ülatma fonksiyonu
  const startListeningTest = async () => {
    try {
      setListeningTestStarted(true);
      setCurrentSection(0);
      setAnswers({});
      setShowTranscript(false); // Metin ba≈ülangƒ±√ßta gizli
      
      // Cache kontrol√º - aynƒ± listening test zaten olu≈üturulmu≈ü mu?
      const cacheKey = 'listening_test_ielts';
      const cachedTest = localStorage.getItem(cacheKey);
      if (cachedTest) {
        console.log('üì¶ Cache\'den listening test y√ºkleniyor...');
        const testData = JSON.parse(cachedTest);
        setListeningContent(testData);
        return;
      }
      
      console.log('üîÑ API\'den listening testi √ºretiliyor...');
      
      // Backend'den IELTS Listening i√ßeriƒüi al
      const response = await fetch('http://localhost:8003/generate-ielts-listening', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          topic: 'Education',
          difficulty: 'Medium',
          accent: 'GB English (Adam - Natural)'
        })
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ API\'den listening testi alƒ±ndƒ±:', data);
        setListeningContent(data);
        
        // Cache'e kaydet
        localStorage.setItem(cacheKey, JSON.stringify(data));
        console.log('üíæ Listening test cache\'e kaydedildi');
      } else {
        console.error('Failed to load listening content');
        // Fallback data - IELTS Listening 4 b√∂l√ºm 40 soru
        setListeningContent({
          sections: [
            {
              id: 'section1',
              title: 'Conversation - Travel Information',
              audio_script: 'Good morning, can I help you with travel information? Yes, I\'m looking for information about train services to Cambridge. The next train to Cambridge departs at 10:15 from platform 3. The journey takes approximately 45 minutes and costs ¬£12.50 for a standard ticket. You can purchase tickets from the ticket office or use the self-service machines.',
              questions: [
                { id: 'q1', question: 'What time does the train to Cambridge depart?', type: 'multiple_choice', options: ['10:15', '10:30', '10:45', '11:00'], correct_answer: '10:15' },
                { id: 'q2', question: 'Which platform does the train leave from?', type: 'multiple_choice', options: ['Platform 1', 'Platform 2', 'Platform 3', 'Platform 4'], correct_answer: 'Platform 3' },
                { id: 'q3', question: 'How long does the journey take?', type: 'fill_blank', correct_answer: '45 minutes' },
                { id: 'q4', question: 'What is the cost of a standard ticket?', type: 'fill_blank', correct_answer: '¬£12.50' },
                { id: 'q5', question: 'Where can tickets be purchased?', type: 'multiple_choice', options: ['Online only', 'Ticket office only', 'Ticket office or self-service machines', 'On the train'], correct_answer: 'Ticket office or self-service machines' },
                { id: 'q6', question: 'The train journey is longer than 30 minutes.', type: 'true_false', correct_answer: 'True' },
                { id: 'q7', question: 'Self-service machines are not available.', type: 'true_false', correct_answer: 'False' },
                { id: 'q8', question: 'The next train is at 10:30.', type: 'true_false', correct_answer: 'False' },
                { id: 'q9', question: 'Tickets cost more than ¬£15.', type: 'true_false', correct_answer: 'False' },
                { id: 'q10', question: 'The service is available every hour.', type: 'true_false', correct_answer: 'Not Given' }
              ]
            },
            {
              id: 'section2',
              title: 'Monologue - University Library',
              audio_script: 'Welcome to the university library. Our library is open Monday to Friday from 8 AM to 10 PM, and weekends from 9 AM to 6 PM. We have over 500,000 books, journals, and digital resources. Students can borrow up to 20 books for 4 weeks. Late returns incur a fine of 50p per day. The library offers study spaces, computer facilities, and printing services.',
              questions: [
                { id: 'q11', question: 'What are the weekend opening hours?', type: 'multiple_choice', options: ['8 AM to 6 PM', '9 AM to 6 PM', '9 AM to 10 PM', '8 AM to 10 PM'], correct_answer: '9 AM to 6 PM' },
                { id: 'q12', question: 'How many books can students borrow?', type: 'fill_blank', correct_answer: '20 books' },
                { id: 'q13', question: 'What is the borrowing period?', type: 'fill_blank', correct_answer: '4 weeks' },
                { id: 'q14', question: 'What is the daily fine for late returns?', type: 'fill_blank', correct_answer: '50p' },
                { id: 'q15', question: 'The library has over 500,000 resources.', type: 'true_false', correct_answer: 'True' },
                { id: 'q16', question: 'Printing services are not available.', type: 'true_false', correct_answer: 'False' },
                { id: 'q17', question: 'The library is closed on Sundays.', type: 'true_false', correct_answer: 'False' },
                { id: 'q18', question: 'Computer facilities are provided.', type: 'true_false', correct_answer: 'True' },
                { id: 'q19', question: 'Students can borrow books for 3 weeks.', type: 'true_false', correct_answer: 'False' },
                { id: 'q20', question: 'The library opens at 7 AM on weekdays.', type: 'true_false', correct_answer: 'False' }
              ]
            },
            {
              id: 'section3',
              title: 'Discussion - Environmental Science',
              audio_script: 'Today we\'re discussing climate change research. Dr. Smith has been studying the effects of global warming on polar ice caps for over 15 years. Her research shows that ice caps are melting at an unprecedented rate. The average temperature has risen by 1.5 degrees Celsius over the past century. This has led to rising sea levels and extreme weather patterns. We need immediate action to reduce carbon emissions.',
              questions: [
                { id: 'q21', question: 'How long has Dr. Smith been studying polar ice caps?', type: 'fill_blank', correct_answer: '15 years' },
                { id: 'q22', question: 'What is the temperature increase over the past century?', type: 'fill_blank', correct_answer: '1.5 degrees Celsius' },
                { id: 'q23', question: 'What is the main concern about ice caps?', type: 'multiple_choice', options: ['They are growing', 'They are melting rapidly', 'They are stable', 'They are shrinking slowly'], correct_answer: 'They are melting rapidly' },
                { id: 'q24', question: 'What has caused rising sea levels?', type: 'multiple_choice', options: ['Rainfall', 'Ice cap melting', 'Ocean currents', 'Wind patterns'], correct_answer: 'Ice cap melting' },
                { id: 'q25', question: 'What action is needed?', type: 'fill_blank', correct_answer: 'reduce carbon emissions' },
                { id: 'q26', question: 'Dr. Smith\'s research shows ice caps are growing.', type: 'true_false', correct_answer: 'False' },
                { id: 'q27', question: 'Temperature has risen by 2 degrees.', type: 'true_false', correct_answer: 'False' },
                { id: 'q28', question: 'Extreme weather patterns have increased.', type: 'true_false', correct_answer: 'True' },
                { id: 'q29', question: 'The research has been ongoing for 20 years.', type: 'true_false', correct_answer: 'False' },
                { id: 'q30', question: 'Immediate action is required.', type: 'true_false', correct_answer: 'True' }
              ]
            },
            {
              id: 'section4',
              title: 'Lecture - Business Management',
              audio_script: 'In today\'s business world, effective leadership is crucial for organizational success. Modern leaders must adapt to changing technologies and global markets. Key leadership qualities include communication skills, emotional intelligence, and strategic thinking. Companies that invest in leadership development see 25% higher employee satisfaction and 15% better financial performance. Leadership training programs typically last 6 months and cost around ¬£5,000 per participant.',
              questions: [
                { id: 'q31', question: 'What is crucial for organizational success?', type: 'fill_blank', correct_answer: 'effective leadership' },
                { id: 'q32', question: 'What percentage improvement in employee satisfaction?', type: 'fill_blank', correct_answer: '25%' },
                { id: 'q33', question: 'What is the financial performance improvement?', type: 'fill_blank', correct_answer: '15%' },
                { id: 'q34', question: 'How long do leadership training programs last?', type: 'fill_blank', correct_answer: '6 months' },
                { id: 'q35', question: 'What is the cost per participant?', type: 'fill_blank', correct_answer: '¬£5,000' },
                { id: 'q36', question: 'Communication skills are important for leaders.', type: 'true_false', correct_answer: 'True' },
                { id: 'q37', question: 'Leadership development has no impact on performance.', type: 'true_false', correct_answer: 'False' },
                { id: 'q38', question: 'Training programs last 12 months.', type: 'true_false', correct_answer: 'False' },
                { id: 'q39', question: 'Global markets require adaptation.', type: 'true_false', correct_answer: 'True' },
                { id: 'q40', question: 'Emotional intelligence is not mentioned as important.', type: 'true_false', correct_answer: 'False' }
              ]
            }
          ],
          total_questions: 40,
          total_duration: 30,
          topic: "IELTS Listening Test",
          difficulty: "Medium",
          instructions: "Listen to the recordings and answer the questions."
        });
        
        // Fallback data'yƒ± da cache'e kaydet
        const fallbackData = {
          sections: [
            // ... fallback sections data ...
          ],
          total_questions: 40,
          total_duration: 30,
          topic: "IELTS Listening Test",
          difficulty: "Medium",
          instructions: "Listen to the recordings and answer the questions."
        };
        localStorage.setItem(cacheKey, JSON.stringify(fallbackData));
        console.log('üíæ Listening fallback test cache\'e kaydedildi');
      }
    } catch (error) {
      console.error('Error starting listening test:', error);
    }
  };

  // Ses √ßalma fonksiyonu
  const playAudio = async (script: string) => {
    try {
      setIsAudioPlaying(true);
      
      // ElevenLabs API ile ses olu≈ütur
      const response = await fetch('http://localhost:8003/elevenlabs-text-to-speech', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          text: script,
          voice: 'Adam',
          accent: 'GB English'
        })
      });
      
      if (response.ok) {
        const audioBlob = await response.blob();
        const audioUrl = URL.createObjectURL(audioBlob);
        const audio = new Audio(audioUrl);
        
        // Hata y√∂netimi ekle
        audio.onerror = (e) => {
          console.error('Audio playback error:', e);
          setIsAudioPlaying(false);
          alert('Ses √ßalarken hata olu≈ütu. L√ºtfen tekrar deneyin.');
        };
        
        audio.onended = () => {
          setIsAudioPlaying(false);
          URL.revokeObjectURL(audioUrl); // Memory leak √∂nleme
        };
        
        // Ses y√ºkleme kontrol√º
        audio.oncanplaythrough = () => {
          audio.play().catch((e) => {
            console.error('Audio play error:', e);
            setIsAudioPlaying(false);
            alert('Ses √ßalarken hata olu≈ütu. L√ºtfen tekrar deneyin.');
          });
        };
        
        audio.onloadstart = () => {
          console.log('Audio loading started...');
        };
        
      } else {
        console.error('Failed to generate audio:', response.status);
        setIsAudioPlaying(false);
        alert('Ses olu≈üturulamadƒ±. L√ºtfen tekrar deneyin.');
      }
    } catch (error) {
      console.error('Error playing audio:', error);
      setIsAudioPlaying(false);
      alert('Ses √ßalarken hata olu≈ütu. L√ºtfen tekrar deneyin.');
    }
  };

  // Cevap deƒüi≈ütirme fonksiyonu
  const handleAnswerChange = (questionId: string, answer: string) => {
    setAnswers(prev => ({
      ...prev,
      [questionId]: answer
    }));
  };

  if (!testStarted) {
    return (
      <div className="general-test-page">
        {/* Header */}
        <header className="homepage-header">
          <div className="header-content">
            <Link to="/" className="logo-section">
              <img 
                src={kitapLogo} 
                alt="IELTSGO Kitap" 
                className="kitap-logo"
              />
              <img 
                src={headerLogo} 
                alt="IELTSGO Yazƒ±" 
                className="header-logo"
              />
            </Link>

            {/* Navigation Menu */}
            <nav className="navbar">
              <Link to="/reading" className="nav-item">
                <BookOpen size={20} />
                <span>Reading</span>
              </Link>
              <Link to="/writing" className="nav-item">
                <PenTool size={20} />
                <span>Writing</span>
              </Link>
              <Link to="/listening" className="nav-item">
                <Headphones size={20} />
                <span>Listening</span>
              </Link>
              <Link to="/speaking" className="nav-item">
                <Mic size={20} />
                <span>Speaking</span>
              </Link>
              <Link to="/general-test" className="nav-item featured active">
                <Trophy size={20} />
                <span>Genel Test</span>
              </Link>
              <Link to="/dashboard" className="nav-item">
                <BarChart3 size={20} />
                <span>Dashboard</span>
              </Link>
            </nav>
            
            {isAuthenticated && (
              <div className="user-section">
                <span className="welcome-text">Ho≈ü geldin, {user?.name || 'Kullanƒ±cƒ±'}!</span>
                <button className="logout-btn" onClick={handleLogout}>√áƒ±kƒ±≈ü Yap</button>
              </div>
            )}
          </div>
        </header>

      <div className="container">
        <div className="text-center mb-4">
          <h1 className="title">
            <Trophy className="icon" />
            Genel IELTS Denemesi
          </h1>
          <p className="subtitle">
            T√ºm mod√ºlleri i√ßeren AI destekli genel IELTS denemesi yapƒ±n ve puanƒ±nƒ±zƒ± √∂ƒürenin.
          </p>
            {!isAuthenticated && (
              <div className="auth-notice">
                <p>üí° Giri≈ü yaparsanƒ±z sonu√ßlarƒ±nƒ±z kaydedilir ve dashboard'ta g√∂r√ºnt√ºlenir.</p>
                <Link to="/login" className="module-btn">Giri≈ü Yap</Link>
              </div>
            )}
        </div>

        <div className="card">
          <h2>Deneme Sƒ±navƒ± Bilgileri</h2>
          <div className="test-info">
            <div className="info-item">
              <Clock className="icon" />
              <span><strong>Toplam S√ºre:</strong> 2 saat 45 dakika</span>
            </div>
            <div className="info-item">
              <CheckCircle className="icon" />
              <span><strong>Mod√ºller:</strong> Reading, Writing, Listening, Speaking</span>
            </div>
          </div>

          <div className="steps-grid">
            {steps.map((step, index) => (
              <div key={index} className="step-card">
                <h3>{step.name}</h3>
                <p><strong>S√ºre:</strong> {step.duration} dakika</p>
                <p><strong>Soru/Task:</strong> {step.questions || step.tasks || step.parts}</p>
                <p className="step-description">{step.description}</p>
              </div>
            ))}
          </div>

          <div className="exam-summary">
            <h3>üìã Sƒ±nav √ñzeti</h3>
            <div className="summary-grid">
              <div className="summary-item">
                <Clock className="icon" />
                <span><strong>Toplam S√ºre:</strong> {totalDuration} dakika</span>
              </div>
              <div className="summary-item">
                <CheckCircle className="icon" />
                <span><strong>Mod√ºl Sayƒ±sƒ±:</strong> {steps.length}</span>
              </div>
              <div className="summary-item">
                <Trophy className="icon" />
                <span><strong>Sƒ±nav T√ºr√º:</strong> Akademik IELTS</span>
              </div>
            </div>
          </div>

          <div className="text-center">
            <button 
              className="btn btn-primary"
              onClick={startTest}
              style={{ background: "#FFD700", color: "#222", fontSize: "1.2rem", padding: "15px 30px" }}
            >
              Denemeyi Ba≈ülat
            </button>
          </div>
        </div>
      </div>
    );
  }


  if (testCompleted) {
    return (
      <div className="general-test-page">
        {/* Header */}
        <header className="homepage-header">
          <div className="header-content">
            <Link to="/" className="logo-section">
              <img 
                src={kitapLogo} 
                alt="IELTSGO Kitap" 
                className="kitap-logo"
              />
              <img 
                src={headerLogo} 
                alt="IELTSGO Yazƒ±" 
                className="header-logo"
              />
            </Link>

            {/* Navigation Menu */}
            <nav className="navbar">
              <Link to="/reading" className="nav-item">
                <BookOpen size={20} />
                <span>Reading</span>
              </Link>
              <Link to="/writing" className="nav-item">
                <PenTool size={20} />
                <span>Writing</span>
              </Link>
              <Link to="/listening" className="nav-item">
                <Headphones size={20} />
                <span>Listening</span>
              </Link>
              <Link to="/speaking" className="nav-item">
                <Mic size={20} />
                <span>Speaking</span>
              </Link>
              <Link to="/general-test" className="nav-item featured active">
                <Trophy size={20} />
                <span>Genel Test</span>
              </Link>
              <Link to="/dashboard" className="nav-item">
                <BarChart3 size={20} />
                <span>Dashboard</span>
              </Link>
            </nav>
            
            {isAuthenticated && (
              <div className="user-section">
                <span className="welcome-text">Ho≈ü geldin, {user?.name || 'Kullanƒ±cƒ±'}!</span>
                <button className="logout-btn" onClick={handleLogout}>√áƒ±kƒ±≈ü Yap</button>
              </div>
            )}
          </div>
        </header>

      <div className="container">
        <div className="text-center mb-4">
          <h1 className="title">
            <Trophy className="icon" />
            Sƒ±nav Tamamlandƒ±!
          </h1>
          <p className="subtitle">Tebrikler! IELTS deneme sƒ±navƒ±nƒ± ba≈üarƒ±yla tamamladƒ±nƒ±z.</p>
        </div>

        {!showDetailedEvaluation ? (
        <div className="card">
          <h2>üìä Sƒ±nav Sonu√ßlarƒ±</h2>
          <div className="results-grid">
            {steps.map((step, index) => (
              <div key={index} className="result-card">
                <h3>{step.name}</h3>
                <div className="result-score">
                  <span className="score-label">Puan:</span>
                    <span className="score-value">
                      {index === 0 && readingResult ? readingResult.band_estimate?.toFixed(1) || '0.0' : 
                       index === 3 && speakingEvaluation ? speakingEvaluation.overall_band?.toFixed(1) || '0.0' : 
                       '-'}
                    </span>
                </div>
                  <p className="result-note">
                    {index === 0 && readingResult ? 'Reading mod√ºl√º tamamlandƒ±' :
                     index === 3 && speakingEvaluation ? 'Speaking mod√ºl√º tamamlandƒ±' :
                     'Bu mod√ºl hen√ºz geli≈ütirilme a≈üamasƒ±ndadƒ±r.'}
                  </p>
              </div>
            ))}
          </div>

          <div className="total-score">
              <h3>Genel Puan: {generalTestResults ? generalTestResults.overall.toFixed(1) : '-'}</h3>
              <p>Detaylƒ± IELTS deƒüerlendirmesi i√ßin a≈üaƒüƒ±daki butona tƒ±klayƒ±n.</p>
            </div>

            <div className="text-center mt-4">
              <button 
                className="btn btn-primary" 
                onClick={evaluateGeneralTest}
                disabled={isEvaluatingGeneralTest}
                style={{ marginRight: '10px' }}
              >
                {isEvaluatingGeneralTest ? (
                  <>üîÑ Deƒüerlendiriliyor...</>
                ) : (
                  <>üìä IELTS Puanƒ±mƒ± Hesapla</>
                )}
              </button>
              <button className="btn btn-outline" onClick={resetTest}>
                <RotateCcw className="icon" />
                Yeni Deneme Ba≈ülat
              </button>
              <Link to="/" className="btn btn-outline" style={{ marginLeft: '10px' }}>
                Ana Sayfaya D√∂n
              </Link>
            </div>
          </div>
        ) : (
          <div className="card">
            <h2>üéØ Detaylƒ± IELTS Deƒüerlendirmesi</h2>
            
            {generalTestResults && (
              <>
                <div className="ielts-scores-overview">
                  <div className="score-grid">
                    <div className="score-item">
                      <span className="score-label">Reading:</span>
                      <span className="score-value">{generalTestResults.reading.toFixed(1)}</span>
                    </div>
                    <div className="score-item">
                      <span className="score-label">Listening:</span>
                      <span className="score-value">{generalTestResults.listening.toFixed(1)}</span>
                    </div>
                    <div className="score-item">
                      <span className="score-label">Writing:</span>
                      <span className="score-value">{generalTestResults.writing.toFixed(1)}</span>
                    </div>
                    <div className="score-item">
                      <span className="score-label">Speaking:</span>
                      <span className="score-value">{generalTestResults.speaking.toFixed(1)}</span>
                    </div>
                    <div className="score-item overall">
                      <span className="score-label">Overall:</span>
                      <span className="score-value">{generalTestResults.overall.toFixed(1)}</span>
                    </div>
                  </div>
                </div>

                <div className="detailed-evaluation">
                  <h3>üìù Genel Deƒüerlendirme</h3>
                  <p>{generalTestResults.detailedEvaluation}</p>
                </div>

                <div className="module-evaluations">
                  <h3>üìö Mod√ºl Bazƒ±nda Deƒüerlendirme</h3>
                  <div className="evaluation-grid">
                    <div className="evaluation-card">
                      <h4>üìñ Reading ({generalTestResults.moduleEvaluations.reading.score.toFixed(1)})</h4>
                      <p>{generalTestResults.moduleEvaluations.reading.feedback}</p>
                    </div>
                    <div className="evaluation-card">
                      <h4>üéß Listening ({generalTestResults.moduleEvaluations.listening.score.toFixed(1)})</h4>
                      <p>{generalTestResults.moduleEvaluations.listening.feedback}</p>
                    </div>
                    <div className="evaluation-card">
                      <h4>‚úçÔ∏è Writing ({generalTestResults.moduleEvaluations.writing.score.toFixed(1)})</h4>
                      <p>{generalTestResults.moduleEvaluations.writing.feedback}</p>
                    </div>
                    <div className="evaluation-card">
                      <h4>üó£Ô∏è Speaking ({generalTestResults.moduleEvaluations.speaking.score.toFixed(1)})</h4>
                      <p>{generalTestResults.moduleEvaluations.speaking.feedback}</p>
                    </div>
                  </div>
          </div>

          <div className="text-center mt-4">
            <button className="btn btn-primary" onClick={resetTest}>
              <RotateCcw className="icon" />
              Yeni Deneme Ba≈ülat
            </button>
                  <Link to="/dashboard" className="btn btn-outline" style={{ marginLeft: '10px' }}>
                    Dashboard'a Git
                  </Link>
                  <Link to="/" className="btn btn-outline" style={{ marginLeft: '10px' }}>
              Ana Sayfaya D√∂n
            </Link>
          </div>
              </>
            )}
        </div>
      </div>
    );
  }

  return (
    <div className="general-test-page">
      {/* Header */}
      <header className="homepage-header">
        <div className="header-content">
          <Link to="/" className="logo-section">
            <img 
              src={kitapLogo} 
              alt="IELTSGO Kitap" 
              className="kitap-logo"
            />
            <img 
              src={headerLogo} 
              alt="IELTSGO Yazƒ±" 
              className="header-logo"
            />
          </Link>

          {/* Navigation Menu */}
          <nav className="navbar">
            <Link to="/reading" className="nav-item">
              <BookOpen size={20} />
              <span>Reading</span>
            </Link>
            <Link to="/writing" className="nav-item">
              <PenTool size={20} />
              <span>Writing</span>
            </Link>
            <Link to="/listening" className="nav-item">
              <Headphones size={20} />
              <span>Listening</span>
            </Link>
            <Link to="/speaking" className="nav-item">
              <Mic size={20} />
              <span>Speaking</span>
            </Link>
            <Link to="/general-test" className="nav-item featured active">
              <Trophy size={20} />
              <span>Genel Test</span>
            </Link>
            <Link to="/dashboard" className="nav-item">
              <BarChart3 size={20} />
              <span>Dashboard</span>
            </Link>
          </nav>
          
          {isAuthenticated && (
            <div className="user-section">
              <span className="welcome-text">Ho≈ü geldin, {user?.name || 'Kullanƒ±cƒ±'}!</span>
              <button className="logout-btn" onClick={handleLogout}>√áƒ±kƒ±≈ü Yap</button>
            </div>
          )}
        </div>
      </header>

    <div className="container">
      {/* Sƒ±nav Header */}
      <div className="exam-header">
        <div className="exam-info">
          <h1 className="title">
            <Trophy className="icon" />
            IELTS Deneme Sƒ±navƒ±
          </h1>
          <p className="subtitle">
            {steps[currentStep].name} Mod√ºl√º - {steps[currentStep].description}
          </p>
        </div>
        
        <div className="exam-controls">
          <div className="timer-display">
            <Clock className="icon" />
            <span className="timer-text">{formatTime(timeLeft)}</span>
          </div>
          
          <div className="control-buttons">
            <button 
              className="btn btn-secondary"
              onClick={pauseTest}
            >
              {isPaused ? <Play className="icon" /> : <Pause className="icon" />}
              {isPaused ? 'Devam Et' : 'Duraklat'}
            </button>
            
            <button 
              className="btn btn-danger"
              onClick={resetTest}
            >
              <RotateCcw className="icon" />
              Sƒ±navƒ± Bitir
            </button>
          </div>
        </div>
      </div>

      {/* ƒ∞lerleme √áubuƒüu */}
      <div className="progress-container">
        <div className="progress-bar">
          <div 
            className="progress-fill" 
            style={{ width: `${getProgressPercentage()}%` }}
          ></div>
        </div>
        <div className="progress-text">
          {currentStep + 1} / {steps.length} Mod√ºl - %{Math.round(getProgressPercentage())} Tamamlandƒ±
        </div>
      </div>

      {/* Mod√ºl ƒ∞√ßeriƒüi */}
      <div className="card">
        <div className="module-header">
          <h2>{steps[currentStep].name} Mod√ºl√º</h2>
          <div className="module-info">
            <span className="module-duration">
              <Clock className="icon" />
              {steps[currentStep].duration} dakika
            </span>
            <span className="module-questions">
              <CheckCircle className="icon" />
              {steps[currentStep].questions || steps[currentStep].tasks || steps[currentStep].parts} {steps[currentStep].questions ? 'soru' : steps[currentStep].tasks ? 'g√∂rev' : 'b√∂l√ºm'}
            </span>
          </div>
        </div>

        <div className="module-content">
          {steps[currentStep].name === 'Listening' ? (
            <div className="listening-module">
              {/* IELTS Listening Instructions */}
              <div className="ielts-instructions">
                <h3>üéß IELTS Listening Test</h3>
                <p>Bu b√∂l√ºmde 4 farklƒ± b√∂l√ºmden olu≈üan dinleme testi yapacaksƒ±nƒ±z. Her b√∂l√ºm farklƒ± bir konu ve zorluk seviyesine sahiptir.</p>
                
                <div className="sections-overview">
                  <h4>B√∂l√ºmler:</h4>
                  <div className="section-preview">
                    <div className="section-item">
                      <strong>B√∂l√ºm 1:</strong> G√ºnl√ºk konu≈üma (10 soru)
                    </div>
                    <div className="section-item">
                      <strong>B√∂l√ºm 2:</strong> Sosyal konu (10 soru)
                    </div>
                    <div className="section-item">
                      <strong>B√∂l√ºm 3:</strong> Eƒüitim/Training (10 soru)
                    </div>
                    <div className="section-item">
                      <strong>B√∂l√ºm 4:</strong> Akademik konu (10 soru)
                    </div>
                  </div>
                </div>

                <div className="section-controls">
                  <button 
                    className="btn btn-primary" 
                    style={{ background: "#8B5CF6", color: "white" }}
                    onClick={startListeningTest}
                  >
                    <Play className="icon" />
                    Listening Testini Ba≈ülat
                  </button>
                  <button className="btn btn-outline">
                    <CheckCircle className="icon" />
                    √ñrnek Sorular
                  </button>
                </div>
              </div>

              {/* Test Content Area */}
              {listeningTestStarted && listeningContent && (
                <div className="test-content">
                  <div className="transcript">
                    <h4>Dinleme Metni - B√∂l√ºm {currentSection + 1}</h4>
                    <div className={`transcript-content ${!showTranscript ? 'hidden' : ''}`}>
                      <p>{showTranscript ? (listeningContent.sections[currentSection]?.audio_script || "Metin y√ºkleniyor...") : "Metin gizli - sadece dinleyin"}</p>
                    </div>
                    <div className="section-controls">
                      <button 
                        className="btn btn-primary"
                        onClick={() => playAudio(listeningContent.sections[currentSection]?.audio_script || "")}
                        disabled={isAudioPlaying}
                      >
                        {isAudioPlaying ? <Pause className="icon" /> : <Play className="icon" />}
                        {isAudioPlaying ? '√áalƒ±yor...' : 'Sesi √áal'}
                      </button>
                      <button 
                        className="btn btn-outline"
                        onClick={() => setShowTranscript(!showTranscript)}
                      >
                        {showTranscript ? 'Metni Gizle' : 'Metni G√∂ster'}
                      </button>
                    </div>
                  </div>

                  <div className="section-questions">
                    <h4>Sorular - B√∂l√ºm {currentSection + 1}</h4>
                    {listeningContent.sections[currentSection]?.questions?.map((question: any, index: number) => (
                      <div key={question.id} className="question-item">
                        <label>{index + 1}. {question.question}</label>
                        {question.type === 'multiple_choice' ? (
                          <div className="question-options">
                            {question.options?.map((option: string, optIndex: number) => (
                              <label key={optIndex} className="option-label">
                                <input 
                                  type="radio" 
                                  name={`question_${question.id}`}
                                  value={option}
                                  checked={answers[question.id] === option}
                                  onChange={(e) => handleAnswerChange(question.id, e.target.value)}
                                />
                                {option}
                              </label>
                            ))}
                          </div>
                        ) : (
                          <input 
                            type="text" 
                            className="answer-input" 
                            placeholder="Cevabƒ±nƒ±zƒ± yazƒ±n..." 
                            value={answers[question.id] || ''}
                            onChange={(e) => handleAnswerChange(question.id, e.target.value)}
                          />
                        )}
                      </div>
                    ))}
                  </div>

                  {/* B√∂l√ºm Navigasyonu */}
                  <div className="section-navigation">
                    <button 
                      className="btn btn-secondary"
                      onClick={() => setCurrentSection(Math.max(0, currentSection - 1))}
                      disabled={currentSection === 0}
                    >
                      ‚Üê √ñnceki B√∂l√ºm
                    </button>
                    
                    <div className="section-indicator">
                      <span className="current-section">B√∂l√ºm {currentSection + 1}</span>
                      <span className="section-counter">{currentSection + 1} / {listeningContent.sections.length}</span>
                    </div>
                    
                    <button 
                      className="btn btn-primary"
                      onClick={() => setCurrentSection(Math.min(listeningContent.sections.length - 1, currentSection + 1))}
                      disabled={currentSection === listeningContent.sections.length - 1}
                    >
                      Sonraki B√∂l√ºm ‚Üí
                    </button>
                  </div>
                  
                  {/* Listening Testi Tamamla Butonu */}
                  <div style={{ textAlign: 'center', marginTop: '30px' }}>
                    <button 
                      className="btn btn-primary" 
                      onClick={() => {
                        if (!moduleCompletion.listening) {
                          setModuleCompletion(prev => ({ ...prev, listening: true }));
                          setListeningResult({
                            band_estimate: 6.5,
                            scaled: {
                              correct: Object.values(answers).filter(a => a).length,
                              total: listeningContent.sections.reduce((total: number, section: any) => total + section.questions.length, 0)
                            }
                          });
                        }
                      }}
                      style={{
                        background: '#8B5CF6', 
                        color: 'white', 
                        padding: '15px 30px', 
                        fontSize: '18px',
                        fontWeight: 'bold',
                        borderRadius: '25px'
                      }}
                    >
                      ‚úÖ Testi Tamamla
                    </button>
                    
                    {moduleCompletion.listening && (
                      <div style={{ textAlign: 'center', marginTop: '15px' }}>
                        <div style={{
                          background: 'linear-gradient(135deg, #4CAF50 0%, #45a049 100%)',
                          color: 'white',
                          padding: '15px',
                          borderRadius: '10px',
                          marginBottom: '15px'
                        }}>
                          <h4 style={{ margin: '0 0 5px 0', fontSize: '18px' }}>‚úÖ Listening Mod√ºl√º Tamamlandƒ±</h4>
                          <p style={{ margin: 0, fontSize: '14px', opacity: 0.9 }}>
                            Test ba≈üarƒ±yla tamamlandƒ±
                          </p>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
          ) : steps[currentStep].name === 'Reading' ? (
            <div className="reading-module">
              {/* IELTS Academic Reading Instructions */}
              <div className="ielts-instructions">
                <h3>üìñ IELTS Academic Reading Test</h3>
                <p>Bu b√∂l√ºmde 3 farklƒ± akademik metinden olu≈üan okuma testi yapacaksƒ±nƒ±z. Her metin farklƒ± bir konu ve zorluk seviyesine sahiptir.</p>
                
                <div className="reading-overview">
                  <h4>Metinler ve Sorular:</h4>
                  <div className="passage-preview">
                    <div className="passage-item">
                      <strong>Metin 1:</strong> Genel akademik konu (13 soru)
                    </div>
                    <div className="passage-item">
                      <strong>Metin 2:</strong> ƒ∞≈ü d√ºnyasƒ±/Eƒüitim konusu (13 soru)
                    </div>
                    <div className="passage-item">
                      <strong>Metin 3:</strong> Bilimsel/Akademik konu (14 soru)
                    </div>
                  </div>
                </div>

                <div className="question-types">
                  <h4>Soru Tipleri:</h4>
                  <div className="types-grid">
                    <div className="type-item">üìù √áoktan Se√ßmeli</div>
                    <div className="type-item">‚úèÔ∏è Bo≈üluk Doldurma</div>
                    <div className="type-item">üîó Ba≈ülƒ±k E≈üle≈ütirme</div>
                    <div className="type-item">üìã Bilgi E≈üle≈ütirme</div>
                    <div className="type-item">‚úÖ Doƒüru/Yanlƒ±≈ü/Deƒüil</div>
                    <div className="type-item">üî¢ Sƒ±ralama</div>
                    <div className="type-item">üí¨ Kƒ±sa Cevaplƒ±</div>
                  </div>
                </div>

                <div className="section-controls">
                  {!readingTest && !readingLoading ? (
                    <div style={{textAlign: 'center', padding: '20px'}}>
                      <div style={{fontSize: '18px', color: '#8B5CF6', marginBottom: '15px'}}>
                        üìñ Reading Testine Hazƒ±r mƒ±sƒ±nƒ±z?
                      </div>
                      <div style={{fontSize: '14px', color: '#666', marginBottom: '20px'}}>
                        3 akademik metin ve 40 soru ile IELTS Academic Reading testi yapƒ±n.
                      </div>
                      <button 
                        className="btn btn-primary" 
                        style={{ background: "#8B5CF6", color: "white", fontSize: "16px", padding: "12px 24px" }}
                        onClick={startReadingTest}
                      >
                        üöÄ Reading Testini Ba≈ülat
                </button>
                    </div>
                  ) : readingLoading ? (
                    <div style={{textAlign: 'center', padding: '20px'}}>
                      <div style={{fontSize: '18px', color: '#8B5CF6', marginBottom: '10px'}}>
                        üîÑ IELTS Academic Reading Testi Olu≈üturuluyor...
                      </div>
                      <div style={{fontSize: '14px', color: '#666'}}>
                        3 akademik metin ve 40 soru hazƒ±rlanƒ±yor...
                      </div>
                    </div>
                  ) : (
                    <div style={{textAlign: 'center', padding: '20px'}}>
                      <div style={{fontSize: '18px', color: '#28a745', marginBottom: '10px'}}>
                        ‚úÖ Test Hazƒ±r!
                      </div>
                      <div style={{fontSize: '14px', color: '#666'}}>
                        A≈üaƒüƒ±daki metinleri okuyup sorularƒ± cevaplayabilirsiniz.
                      </div>
                    </div>
                  )}
                </div>
              </div>


              {readingError && (
                <div className="error-message" style={{color:'#d33', background:'#ffe6e6', padding:'10px', borderRadius:'5px', margin:'10px 0'}}>
                  ‚ùå {readingError}
                </div>
              )}

              {readingTest && (
                <div className="reading-content">
                  {/* Sayfa Navigasyonu */}
                  <div className="passage-navigation" style={{display: 'flex', justifyContent: 'center', gap: '10px', marginBottom: '20px'}}>
                    {readingTest?.passages?.map((_: any, index: number) => (
                      <button
                        key={index}
                        className={`passage-nav-btn ${currentReadingPassage === index ? 'active' : ''}`}
                        onClick={() => setCurrentReadingPassage(index)}
                        style={{
                          padding: '8px 16px',
                          border: '2px solid #8B5CF6',
                          borderRadius: '20px',
                          background: currentReadingPassage === index ? '#8B5CF6' : 'transparent',
                          color: currentReadingPassage === index ? 'white' : '#8B5CF6',
                          cursor: 'pointer',
                          fontSize: '14px',
                          fontWeight: 'bold'
                        }}
                      >
                        Metin {index + 1}
                      </button>
                    ))}
                  </div>

                  {/* Mevcut Metin ve Sorularƒ± */}
                  {readingTest?.passages && readingTest.passages[currentReadingPassage] && (
                    <div className="current-passage-content">
                      {/* Metin */}
                      <div className="passage-section" style={{marginBottom: '30px', border: '2px solid #8B5CF6', padding: '25px', borderRadius: '12px', background: '#f8f9fa'}}>
                        <div className="passage-header" style={{marginBottom: '20px', textAlign: 'center'}}>
                          <h4 style={{color: '#8B5CF6', fontSize: '20px', margin: '0 0 10px 0'}}>
                            Metin {currentReadingPassage + 1}: {readingTest?.passages?.[currentReadingPassage]?.title || 'Metin'}
                          </h4>
                          <span className="passage-info" style={{color: '#666', fontSize: '14px'}}>
                            ~{readingTest?.passages?.[currentReadingPassage]?.word_count || 800} kelime
                          </span>
                        </div>
                        <div className="passage-text" style={{
                          lineHeight: '1.8', 
                          fontSize: '15px', 
                          textAlign: 'justify',
                          background: 'white',
                          padding: '20px',
                          borderRadius: '8px',
                          border: '1px solid #e0e0e0'
                        }}>
                          {readingTest?.passages?.[currentReadingPassage]?.text || 'Metin y√ºkleniyor...'}
                        </div>
                      </div>

                      {/* Bu Metne Ait Sorular */}
                      <div className="questions-container">
                        <h4 style={{color: '#8B5CF6', fontSize: '18px', marginBottom: '20px'}}>
                          üìù Metin {currentReadingPassage + 1} Sorularƒ±
                        </h4>
                        <div className="questions-grid">
                          {readingTest?.questions
                            ?.filter((q: any) => q.passage_id === readingTest.passages?.[currentReadingPassage]?.id)
                            ?.map((question: any, idx: number) => {
                              // Her metin i√ßin sorular kendi i√ßinde 1, 2, 3... ≈üeklinde
                              const questionNumber = idx + 1;
                              
                              // Sonu√ß kontrol√º - yanlƒ±≈ü veya bo≈ü sorularƒ± i≈üaretle
                              const userAnswer = readingAnswers[question.id];
                              const correctAnswer = question.correct_answer || question.answer;
                              const isAnswered = userAnswer && userAnswer.trim() !== '';
                              const isCorrect = isAnswered && userAnswer === correctAnswer;
                              const showResult = false; // Sonu√ßlarƒ± g√∂sterme, sadece test tamamlandƒ±ƒüƒ±nda g√∂sterilecek
                              
                              return (
                                <div key={question.id} className="question-section" style={{
                                  marginBottom: '20px', 
                                  border: showResult ? (isCorrect ? '2px solid #28a745' : '2px solid #dc3545') : '1px solid #e0e0e0', 
                                  padding: '20px', 
                                  borderRadius: '8px',
                                  background: showResult ? (isCorrect ? '#f8fff8' : '#fff5f5') : 'white'
                                }}>
                                  <div className="question-header" style={{marginBottom: '15px'}}>
                                    <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '10px'}}>
                                      <span className="question-number" style={{
                                        background: showResult ? (isCorrect ? '#28a745' : '#dc3545') : '#8B5CF6', 
                                        color: 'white', 
                                        padding: '4px 12px', 
                                        borderRadius: '15px', 
                                        fontSize: '14px',
                                        fontWeight: 'bold'
                                      }}>
                                        Soru {questionNumber}
                                      </span>
                                      {showResult && (
                                        <span style={{
                                          background: isCorrect ? '#28a745' : '#dc3545',
                                          color: 'white',
                                          padding: '4px 8px',
                                          borderRadius: '12px',
                                          fontSize: '12px',
                                          fontWeight: 'bold'
                                        }}>
                                          {isCorrect ? '‚úÖ Doƒüru' : (isAnswered ? '‚ùå Yanlƒ±≈ü' : '‚ö†Ô∏è Bo≈ü')}
                                        </span>
                                      )}
                                    </div>
                                    <span className="question-type" style={{
                                      color: '#666',
                                      fontSize: '12px',
                                      background: '#f0f0f0',
                                      padding: '2px 8px',
                                      borderRadius: '10px'
                                    }}>
                                      {question.type}
                                    </span>
                                  </div>
                                  
                                  {/* Yanlƒ±≈ü/Bo≈ü sorular i√ßin doƒüru cevap g√∂sterimi */}
                                  {showResult && !isCorrect && (
                                    <div style={{
                                      background: '#fff3cd',
                                      border: '1px solid #ffeaa7',
                                      borderRadius: '6px',
                                      padding: '10px',
                                      marginBottom: '15px',
                                      fontSize: '14px'
                                    }}>
                                      <strong style={{color: '#856404'}}>üí° Doƒüru Cevap:</strong>
                                      <span style={{color: '#856404', marginLeft: '5px', fontWeight: 'bold'}}>
                                        {(() => {
                                          const answer = question.correct_answer || question.answer;
                                          if (question.type === 'Multiple Choice' && typeof answer === 'number') {
                                            // Index'i A,B,C,D formatƒ±na √ßevir
                                            const letters = ['A', 'B', 'C', 'D'];
                                            const letter = letters[answer] || answer;
                                            const optionText = question.options && question.options[answer] ? question.options[answer] : '';
                                            return `${letter}) ${optionText}`;
                                          }
                                          return answer || 'Cevap hen√ºz belirlenmedi';
                                        })()}
                                      </span>
                                      {userAnswer && (
                                        <div style={{marginTop: '5px', fontSize: '13px'}}>
                                          <strong style={{color: '#dc3545'}}>Sizin Cevabƒ±nƒ±z:</strong>
                                          <span style={{color: '#dc3545', marginLeft: '5px'}}>
                                            {(() => {
                                              if (question.type === 'Multiple Choice' && typeof userAnswer === 'string' && /^\d+$/.test(userAnswer)) {
                                                // Kullanƒ±cƒ±nƒ±n cevabƒ± da index ise A,B,C,D formatƒ±na √ßevir
                                                const index = parseInt(userAnswer);
                                                const letters = ['A', 'B', 'C', 'D'];
                                                const letter = letters[index] || userAnswer;
                                                const optionText = question.options && question.options[index] ? question.options[index] : '';
                                                return `${letter}) ${optionText}`;
                                              }
                                              return userAnswer;
                                            })()}
                                          </span>
                                        </div>
                                      )}
                                      {!isAnswered && (
                                        <div style={{marginTop: '5px', fontSize: '13px'}}>
                                          <strong style={{color: '#dc3545'}}>Sizin Cevabƒ±nƒ±z:</strong>
                                          <span style={{color: '#dc3545', marginLeft: '5px', fontStyle: 'italic'}}>
                                            Bo≈ü bƒ±rakƒ±ldƒ±
                                          </span>
                                        </div>
                                      )}
                                    </div>
                                  )}
                                  <div className="question-content">
                                    <label className="question-prompt" style={{
                                      display: 'block',
                                      marginBottom: '15px',
                                      fontSize: '15px',
                                      fontWeight: '500',
                                      lineHeight: '1.5'
                                    }}>
                                      {question.prompt}
                                    </label>
                                    
                                    {question.type === 'Multiple Choice' || Array.isArray(question.options) ? (
                          <div className="question-options">
                                        {question.options?.map((option: string, i: number) => (
                                          <label key={i} className="option-label" style={{
                                            display: 'block',
                                            marginBottom: '8px',
                                            padding: '8px',
                                            border: '1px solid #e0e0e0',
                                            borderRadius: '5px',
                                            cursor: 'pointer',
                                            background: readingAnswers[question.id] === option ? '#e8f2ff' : 'transparent'
                                          }}>
                                <input
                                  type="radio"
                                              name={`rq_${question.id}`}
                                              value={option}
                                              checked={readingAnswers[question.id] === option}
                                              onChange={(e)=>setReadingAnswer(question.id, e.target.value)}
                                              style={{marginRight: '8px'}}
                                            />
                                            {String.fromCharCode(65 + i)}) {option}
                              </label>
                            ))}
                          </div>
                                    ) : question.type === 'True/False/Not Given' ? (
                                      <div className="question-options" style={{display: 'flex', gap: '15px'}}>
                                        <label className="option-label" style={{
                                          display: 'flex',
                                          alignItems: 'center',
                                          padding: '8px 16px',
                                          border: '2px solid #8B5CF6',
                                          borderRadius: '20px',
                                          cursor: 'pointer',
                                          background: readingAnswers[question.id] === 'True' ? '#8B5CF6' : 'transparent',
                                          color: readingAnswers[question.id] === 'True' ? 'white' : '#8B5CF6'
                                        }}>
                                          <input
                                            type="radio"
                                            name={`rq_${question.id}`}
                                            value="True"
                                            checked={readingAnswers[question.id] === 'True'}
                                            onChange={(e)=>setReadingAnswer(question.id, e.target.value)}
                                            style={{marginRight: '8px'}}
                                          />
                                          True
                                        </label>
                                        <label className="option-label" style={{
                                          display: 'flex',
                                          alignItems: 'center',
                                          padding: '8px 16px',
                                          border: '2px solid #8B5CF6',
                                          borderRadius: '20px',
                                          cursor: 'pointer',
                                          background: readingAnswers[question.id] === 'False' ? '#8B5CF6' : 'transparent',
                                          color: readingAnswers[question.id] === 'False' ? 'white' : '#8B5CF6'
                                        }}>
                                          <input
                                            type="radio"
                                            name={`rq_${question.id}`}
                                            value="False"
                                            checked={readingAnswers[question.id] === 'False'}
                                            onChange={(e)=>setReadingAnswer(question.id, e.target.value)}
                                            style={{marginRight: '8px'}}
                                          />
                                          False
                                        </label>
                                        <label className="option-label" style={{
                                          display: 'flex',
                                          alignItems: 'center',
                                          padding: '8px 16px',
                                          border: '2px solid #8B5CF6',
                                          borderRadius: '20px',
                                          cursor: 'pointer',
                                          background: readingAnswers[question.id] === 'Not Given' ? '#8B5CF6' : 'transparent',
                                          color: readingAnswers[question.id] === 'Not Given' ? 'white' : '#8B5CF6'
                                        }}>
                                          <input
                                            type="radio"
                                            name={`rq_${question.id}`}
                                            value="Not Given"
                                            checked={readingAnswers[question.id] === 'Not Given'}
                                            onChange={(e)=>setReadingAnswer(question.id, e.target.value)}
                                            style={{marginRight: '8px'}}
                                          />
                                          Not Given
                                        </label>
                          </div>
                        ) : (
                          <input
                            type="text"
                            className="answer-input"
                            placeholder="Cevabƒ±nƒ±zƒ± yazƒ±n..."
                                        value={readingAnswers[question.id] || ''}
                                        onChange={(e)=>setReadingAnswer(question.id, e.target.value)}
                                        style={{
                                          width: '100%', 
                                          padding: '12px', 
                                          border: '2px solid #e0e0e0', 
                                          borderRadius: '8px',
                                          fontSize: '15px',
                                          outline: 'none',
                                          transition: 'border-color 0.3s'
                                        }}
                                        onFocus={(e) => e.target.style.borderColor = '#8B5CF6'}
                                        onBlur={(e) => e.target.style.borderColor = '#e0e0e0'}
                          />
                        )}
                      </div>
                                </div>
                              );
                            })}
                        </div>
                  </div>

                      {/* Metin Navigasyon Butonlarƒ± */}
                      <div className="passage-navigation-buttons" style={{
                        display: 'flex', 
                        justifyContent: 'space-between', 
                        marginTop: '30px',
                        padding: '20px 0'
                      }}>
                        <button 
                          className="btn btn-secondary"
                          onClick={() => setCurrentReadingPassage(Math.max(0, currentReadingPassage - 1))}
                          disabled={currentReadingPassage === 0}
                          style={{
                            padding: '12px 24px',
                            fontSize: '16px',
                            opacity: currentReadingPassage === 0 ? 0.5 : 1,
                            cursor: currentReadingPassage === 0 ? 'not-allowed' : 'pointer'
                          }}
                        >
                          ‚Üê √ñnceki Metin
                    </button>
                        
                        <div className="passage-info" style={{
                          display: 'flex',
                          alignItems: 'center',
                          gap: '20px',
                          fontSize: '14px',
                          color: '#666'
                        }}>
                          <span>Metin {currentReadingPassage + 1} / {readingTest?.passages?.length || 0}</span>
                          <span>
                            {readingTest?.questions?.filter((q: any) => q.passage_id === readingTest?.passages?.[currentReadingPassage]?.id).length || 0} soru
                          </span>
                        </div>
                        
                        <button 
                          className="btn btn-primary"
                          onClick={() => setCurrentReadingPassage(Math.min((readingTest?.passages?.length || 1) - 1, currentReadingPassage + 1))}
                          disabled={currentReadingPassage === (readingTest?.passages?.length || 1) - 1}
                          style={{
                            background: '#8B5CF6',
                            color: 'white',
                            padding: '12px 24px',
                            fontSize: '16px',
                            opacity: currentReadingPassage === readingTest.passages.length - 1 ? 0.5 : 1,
                            cursor: currentReadingPassage === readingTest.passages.length - 1 ? 'not-allowed' : 'pointer'
                          }}
                        >
                          Sonraki Metin ‚Üí
                      </button>
                      </div>
                    </div>
                  )}

                  {/* Test Tamamlama Butonu */}
                  {currentReadingPassage === (readingTest?.passages?.length || 0) - 1 && (
                    <div className="reading-actions" style={{
                      display:'flex', 
                      gap:12, 
                      marginTop:30, 
                      justifyContent: 'center',
                      padding: '20px',
                      background: '#f8f9fa',
                      borderRadius: '10px',
                      border: '2px solid #8B5CF6'
                    }}>
                      <button 
                        className="btn btn-primary" 
                        onClick={() => {
                          if (!readingResult) {
                            submitReading();
                          } else if (!moduleCompletion.reading) {
                            setModuleCompletion(prev => ({ ...prev, reading: true }));
                          }
                        }}
                        disabled={readingLoading}
                        style={{
                          background: '#8B5CF6', 
                          color: 'white', 
                          padding: '15px 30px', 
                          fontSize: '18px',
                          fontWeight: 'bold',
                          borderRadius: '25px'
                        }}
                      >
                        {readingLoading ? 'üîÑ Deƒüerlendiriliyor...' : '‚úÖ Testi Tamamla'}
                    </button>
                    {moduleCompletion.reading && (
                        <div style={{ textAlign: 'center', marginTop: '15px' }}>
                          <div style={{
                            background: 'linear-gradient(135deg, #4CAF50 0%, #45a049 100%)',
                            color: 'white',
                            padding: '15px',
                            borderRadius: '10px',
                            marginBottom: '15px'
                          }}>
                            <h4 style={{ margin: '0 0 5px 0', fontSize: '18px' }}>‚úÖ Reading Mod√ºl√º Tamamlandƒ±</h4>
                            <p style={{ margin: 0, fontSize: '14px', opacity: 0.9 }}>
                              Test ba≈üarƒ±yla tamamlandƒ±
                            </p>
                  </div>
                        </div>
                    )}
                  </div>
                  )}

                </div>
              )}
            </div>
          ) : steps[currentStep].name === 'Writing' ? (
            <div className="writing-module">
              {/* IELTS Writing Instructions */}
              <div className="ielts-instructions">
                <h3>‚úçÔ∏è IELTS Writing Test</h3>
                <p>Bu b√∂l√ºmde 2 farklƒ± yazma g√∂revi yapacaksƒ±nƒ±z. Academic ve General Training arasƒ±nda se√ßim yapabilirsiniz.</p>
                
                <div className="writing-overview">
                  <h4>G√∂revler:</h4>
                  <div className="task-preview">
                    <div className="task-item">
                      <strong>Task 1:</strong> Academic (grafik/≈üema analizi) veya General (mektup yazma)
                    </div>
                    <div className="task-item">
                      <strong>Task 2:</strong> Essay yazma (Academic/General)
                    </div>
                  </div>
                </div>

                <div className="writing-controls">
                  <div className="mode-selection" style={{marginBottom: '20px'}}>
                    <label style={{marginRight: '20px'}}>
                      <input 
                        type="radio" 
                        name="writingMode" 
                        value="academic" 
                        checked={writingMode === 'academic'}
                        onChange={(e) => setWritingMode(e.target.value)}
                        style={{marginRight: '8px'}}
                      />
                      Academic
                    </label>
                    <label>
                      <input 
                        type="radio" 
                        name="writingMode" 
                        value="general" 
                        checked={writingMode === 'general'}
                        onChange={(e) => setWritingMode(e.target.value)}
                        style={{marginRight: '8px'}}
                      />
                      General Training
                    </label>
                  </div>

                  {Object.keys(writingTopics).length === 0 && !writingLoading ? (
                    <div style={{textAlign: 'center', padding: '20px'}}>
                      <div style={{fontSize: '18px', color: '#8B5CF6', marginBottom: '15px'}}>
                        ‚úçÔ∏è Writing Testine Hazƒ±r mƒ±sƒ±nƒ±z?
                      </div>
                      <div style={{fontSize: '14px', color: '#666', marginBottom: '20px'}}>
                        2 yazma g√∂revi ile IELTS Writing testi yapƒ±n.
                      </div>
                      <button 
                        className="btn btn-primary" 
                        style={{ background: "#8B5CF6", color: "white", fontSize: "16px", padding: "12px 24px" }}
                        onClick={startWritingTest}
                      >
                        üöÄ Writing Testini Ba≈ülat
                      </button>
                    </div>
                  ) : writingLoading ? (
                    <div style={{textAlign: 'center', padding: '20px'}}>
                      <div style={{fontSize: '18px', color: '#8B5CF6', marginBottom: '10px'}}>
                        üîÑ IELTS Writing konularƒ± olu≈üturuluyor...
                      </div>
                      <div style={{fontSize: '14px', color: '#666'}}>
                        Task 1 ve Task 2 konularƒ± hazƒ±rlanƒ±yor...
                      </div>
                    </div>
                  ) : (
                    <div style={{textAlign: 'center', padding: '20px'}}>
                      <div style={{fontSize: '18px', color: '#28a745', marginBottom: '10px'}}>
                        ‚úÖ Test Hazƒ±r!
                      </div>
                      <div style={{fontSize: '14px', color: '#666'}}>
                        A≈üaƒüƒ±daki g√∂revleri tamamlayabilirsiniz.
                      </div>
                    </div>
                  )}
                </div>
                  </div>

              {writingError && (
                <div className="error-message" style={{color:'#d33', background:'#ffe6e6', padding:'10px', borderRadius:'5px', margin:'10px 0'}}>
                  ‚ùå {writingError}
                </div>
              )}

              {Object.keys(writingTopics).length > 0 && (
                <div className="writing-content">
                  {/* Task Navigasyonu */}
                  <div className="task-navigation" style={{display: 'flex', justifyContent: 'center', gap: '10px', marginBottom: '20px'}}>
                    <button
                      className={`task-nav-btn ${currentWritingTask === 0 ? 'active' : ''}`}
                      onClick={() => setCurrentWritingTask(0)}
                      style={{
                        padding: '8px 16px',
                        border: '2px solid #8B5CF6',
                        borderRadius: '20px',
                        background: currentWritingTask === 0 ? '#8B5CF6' : 'transparent',
                        color: currentWritingTask === 0 ? 'white' : '#8B5CF6',
                        cursor: 'pointer',
                        fontSize: '14px',
                        fontWeight: 'bold'
                      }}
                    >
                      Task 1
                    </button>
                    <button
                      className={`task-nav-btn ${currentWritingTask === 1 ? 'active' : ''}`}
                      onClick={() => setCurrentWritingTask(1)}
                      style={{
                        padding: '8px 16px',
                        border: '2px solid #8B5CF6',
                        borderRadius: '20px',
                        background: currentWritingTask === 1 ? '#8B5CF6' : 'transparent',
                        color: currentWritingTask === 1 ? 'white' : '#8B5CF6',
                        cursor: 'pointer',
                        fontSize: '14px',
                        fontWeight: 'bold'
                      }}
                    >
                      Task 2
                    </button>
                  </div>

                  {/* Mevcut Task */}
                  {(() => {
                    const taskKey = currentWritingTask === 0 ? 'task1' : 'task2';
                    const topic = writingTopics[taskKey];
                    const essay = writingEssays[taskKey] || '';
                    const result = writingResults[taskKey];
                    const isTask1 = currentWritingTask === 0;

                    return (
                      <div className="current-task-content">
                        {/* Task Ba≈ülƒ±ƒüƒ± ve Konu */}
                        <div className="task-section" style={{
                          marginBottom: '30px', 
                          border: '2px solid #8B5CF6', 
                          padding: '25px', 
                          borderRadius: '12px', 
                          background: '#f8f9fa'
                        }}>
                          <div className="task-header" style={{marginBottom: '20px', textAlign: 'center'}}>
                            <h4 style={{color: '#8B5CF6', fontSize: '20px', margin: '0 0 10px 0'}}>
                              {isTask1 ? 'Task 1' : 'Task 2'}: {isTask1 ? 
                                (writingMode === 'academic' ? 'Grafik/≈ûema Analizi' : 'Mektup Yazma') : 
                                'Essay Yazma'
                              }
                            </h4>
                            <span className="task-info" style={{color: '#666', fontSize: '14px'}}>
                              {isTask1 ? 
                                (writingMode === 'academic' ? '~150 kelime' : '~150 kelime') : 
                                '~250 kelime'
                              } ‚Ä¢ {writingMode === 'academic' ? 'Academic' : 'General Training'}
                            </span>
                          </div>
                          
                          {topic && (
                            <div className="task-topic" style={{
                              background: 'white',
                              padding: '20px',
                              borderRadius: '8px',
                              border: '1px solid #e0e0e0',
                              fontSize: '15px',
                              lineHeight: '1.6'
                            }}>
                              <strong style={{color: '#8B5CF6'}}>Konu:</strong><br/>
                              {topic}
                            </div>
                          )}
                        </div>

                        {/* Essay Yazma Alanƒ± */}
                        <div className="essay-section" style={{
                          marginBottom: '30px',
                          background: 'white',
                          padding: '25px',
                          borderRadius: '12px',
                          border: '1px solid #e0e0e0'
                        }}>
                          <h5 style={{color: '#8B5CF6', marginBottom: '15px'}}>
                            ‚úçÔ∏è Essay'inizi Yazƒ±n
                          </h5>
                          <textarea
                            value={essay}
                            onChange={(e) => setWritingEssays(prev => ({ ...prev, [taskKey]: e.target.value }))}
                            placeholder={isTask1 ? 
                              (writingMode === 'academic' ? 'Grafik veya ≈üemayƒ± analiz edin...' : 'Mektubunuzu yazƒ±n...') : 
                              'Essay yazƒ±n...'
                            }
                            style={{
                              width: '100%',
                              height: '300px',
                              padding: '15px',
                              border: '2px solid #e0e0e0',
                              borderRadius: '8px',
                              fontSize: '15px',
                              lineHeight: '1.6',
                              resize: 'vertical',
                              outline: 'none',
                              transition: 'border-color 0.3s'
                            }}
                            onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => e.target.style.borderColor = '#8B5CF6'}
                            onBlur={(e: React.FocusEvent<HTMLTextAreaElement>) => e.target.style.borderColor = '#e0e0e0'}
                          />
                          <div style={{
                            marginTop: '10px',
                            fontSize: '14px',
                            color: '#666',
                            textAlign: 'right'
                          }}>
                            {essay.length} karakter
                          </div>
                        </div>

                        {/* Deƒüerlendirme Butonu ve Sonu√ß */}
                        <div className="evaluation-section" style={{textAlign: 'center'}}>
                          <button
                            onClick={() => {
                              if (!result) {
                                evaluateWriting(taskKey);
                              } else if (!moduleCompletion.writing) {
                                setModuleCompletion(prev => ({ ...prev, writing: true }));
                              }
                            }}
                            disabled={writingLoading || essay.trim().length < 50}
                            style={{
                              background: '#8B5CF6',
                              color: 'white',
                              padding: '15px 30px',
                              fontSize: '18px',
                              fontWeight: 'bold',
                              borderRadius: '25px',
                              border: 'none',
                              cursor: (writingLoading || essay.trim().length < 50) ? 'not-allowed' : 'pointer',
                              opacity: (writingLoading || essay.trim().length < 50) ? 0.7 : 1,
                              marginBottom: '20px'
                            }}
                          >
                            {writingLoading ? 'üîÑ Deƒüerlendiriliyor...' : '‚úÖ Testi Tamamla'}
                          </button>

                          {moduleCompletion.writing && (
                            <div style={{ textAlign: 'center', marginTop: '15px' }}>
                              <div style={{
                                background: 'linear-gradient(135deg, #4CAF50 0%, #45a049 100%)',
                                color: 'white',
                                padding: '15px',
                                borderRadius: '10px',
                                marginBottom: '15px'
                              }}>
                                <h4 style={{ margin: '0 0 5px 0', fontSize: '18px' }}>‚úÖ Writing Mod√ºl√º Tamamlandƒ±</h4>
                                <p style={{ margin: 0, fontSize: '14px', opacity: 0.9 }}>
                                  Test ba≈üarƒ±yla tamamlandƒ±
                                </p>
                              </div>
                            </div>
                          )}
                        </div>
                      </div>
                    );
                  })()}

                  {/* Task Navigasyon Butonlarƒ± */}
                  <div className="task-navigation-buttons" style={{
                    display: 'flex', 
                    justifyContent: 'space-between', 
                    marginTop: '30px',
                    padding: '20px 0'
                  }}>
                    <button 
                      className="btn btn-secondary"
                      onClick={() => setCurrentWritingTask(Math.max(0, currentWritingTask - 1))}
                      disabled={currentWritingTask === 0}
                      style={{
                        padding: '12px 24px',
                        fontSize: '16px',
                        opacity: currentWritingTask === 0 ? 0.5 : 1,
                        cursor: currentWritingTask === 0 ? 'not-allowed' : 'pointer'
                      }}
                    >
                      ‚Üê √ñnceki Task
                    </button>
                    
                    <div className="task-info" style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: '20px',
                      fontSize: '14px',
                      color: '#666'
                    }}>
                      <span>Task {currentWritingTask + 1} / 2</span>
                      <span>
                        {currentWritingTask === 0 ? 
                          (writingMode === 'academic' ? 'Grafik Analizi' : 'Mektup') : 
                          'Essay'
                        }
                      </span>
                    </div>
                    
                    <button 
                      className="btn btn-primary"
                      onClick={() => setCurrentWritingTask(Math.min(1, currentWritingTask + 1))}
                      disabled={currentWritingTask === 1}
                      style={{
                        background: '#8B5CF6',
                        color: 'white',
                        padding: '12px 24px',
                        fontSize: '16px',
                        opacity: currentWritingTask === 1 ? 0.5 : 1,
                        cursor: currentWritingTask === 1 ? 'not-allowed' : 'pointer'
                      }}
                    >
                      Sonraki Task ‚Üí
                    </button>
                  </div>
                </div>
              )}
            </div>
          ) : steps[currentStep].name === 'Speaking' ? (
            <div className="speaking-module">
              {!speakingTestStarted ? (
                <div className="text-center" style={{ padding: '40px' }}>
                  <h3>üó£Ô∏è IELTS Speaking Test</h3>
                  <p style={{ marginBottom: '30px', color: '#666' }}>
                    AI ile olu≈üturulan 3 b√∂l√ºml√º IELTS Speaking testi. Her soru ses olarak dinlenebilir ve cevabƒ±nƒ±z kayƒ±t edilir.
                  </p>
                  <button 
                    className="btn btn-primary" 
                    onClick={startSpeakingTest}
                    disabled={speakingLoading}
                    style={{ fontSize: '18px', padding: '15px 30px' }}
                  >
                    {speakingLoading ? 'Test Olu≈üturuluyor...' : 'üöÄ Speaking Testini Ba≈ülat'}
                  </button>
                  {speakingError && (
                    <div className="error-message" style={{ marginTop: '20px', color: '#d33' }}>
                      ‚ùå {speakingError}
                    </div>
                  )}
                </div>
              ) : (
                        <div>
                  <div className="ielts-instructions">
                    <h3>üó£Ô∏è IELTS Speaking Test - Part {speakingPart}</h3>
                    <div className="section-controls" style={{ display: 'flex', gap: 8, flexWrap: 'wrap', marginBottom: '20px' }}>
                      <button className={`btn ${speakingPart === 1 ? 'btn-primary' : 'btn-outline'}`} onClick={() => { setSpeakingPart(1); setCurrentSpeakingQuestion(0); }}>Part 1</button>
                      <button className={`btn ${speakingPart === 2 ? 'btn-primary' : 'btn-outline'}`} onClick={() => { setSpeakingPart(2); setCurrentSpeakingQuestion(0); }}>Part 2</button>
                      <button className={`btn ${speakingPart === 3 ? 'btn-primary' : 'btn-outline'}`} onClick={() => { setSpeakingPart(3); setCurrentSpeakingQuestion(0); }}>Part 3</button>
                    </div>
                  </div>

                  {speakingError && (
                    <div className="error-message" style={{color:'#d33', background:'#ffe6e6', padding:10, borderRadius:6, margin:'10px 0'}}>
                      ‚ùå {speakingError}
                        </div>
                      )}

                  {/* Yeni Speaking UI */}
                  {speakingPart === 1 && (
                    <div className="card" style={{ marginTop: 10 }}>
                      <h4>Part 1: Introduction and Interview</h4>
                      <p style={{ color: '#666', marginBottom: '20px' }}>
                        Soru {currentSpeakingQuestion + 1} / {speakingQuestions.part1.length}
                      </p>
                      
                      <div style={{ marginBottom: '20px' }}>
                        <div style={{ marginBottom: '15px', textAlign: 'center' }}>
                          <h4 style={{ color: '#8B5CF6', margin: '0 0 10px 0' }}>
                            üéß Part 1 - Soru {currentSpeakingQuestion + 1}
                          </h4>
                          <p style={{ color: '#666', fontSize: '14px', margin: '0 0 15px 0' }}>
                            A≈üaƒüƒ±daki butona tƒ±klayarak soruyu dinleyin ve cevaplayƒ±n
                          </p>
                        </div>
                        
                        {/* Ses oynatma butonu */}
                        <div style={{ textAlign: 'center', marginBottom: '20px' }}>
                          <button
                            className="btn btn-primary"
                            onClick={() => {
                              const audioUrl = speakingQuestions.part1[currentSpeakingQuestion].audioUrl;
                              if (!audioUrl || audioUrl.trim() === '') {
                                alert('Ses dosyasƒ± hen√ºz hazƒ±r deƒüil. L√ºtfen sayfayƒ± yenileyin ve tekrar deneyin.');
                                return;
                              }
                              
                              const audio = new Audio(audioUrl);
                              audio.onerror = (e) => {
                                console.error('Audio playback error:', e);
                                alert('Ses √ßalarken hata olu≈ütu. L√ºtfen tekrar deneyin.');
                              };
                              audio.play().catch((e) => {
                                console.error('Audio play error:', e);
                                alert('Ses √ßalarken hata olu≈ütu. L√ºtfen tekrar deneyin.');
                              });
                            }}
                            style={{ 
                              padding: '15px 30px', 
                              fontSize: '16px',
                              background: '#8B5CF6',
                              color: 'white',
                              border: 'none',
                              borderRadius: '25px',
                              cursor: 'pointer'
                            }}
                          >
                            üîä Soruyu Dinle
                          </button>
                        </div>
                        
                        {/* Cevap textarea */}
                        <div style={{ marginBottom: '10px' }}>
                          <p style={{ fontSize: '14px', color: '#666', margin: '0 0 8px 0' }}>
                            üí° <strong>Konu≈üamƒ±yorsanƒ±z buraya yazabilirsiniz</strong>
                          </p>
                        </div>
                        <textarea
                          value={speakingAnswers.part1[currentSpeakingQuestion] || ''}
                          onChange={(e) => {
                            setSpeakingAnswers(prev => ({
                              ...prev,
                              part1: prev.part1.map((answer, i) => 
                                i === currentSpeakingQuestion ? e.target.value : answer
                              )
                            }));
                          }}
                          placeholder="Cevabƒ±nƒ±zƒ± buraya yazƒ±n veya kayƒ±t yapƒ±n"
                          style={{ width:'100%', minHeight: 120, padding: 12, border:'1px solid #e0e0e0', borderRadius: 8, background:'#ffffff' }}
                        />
                        
                        {/* Kayƒ±t butonu */}
                        <div style={{ marginTop: '15px', display: 'flex', gap: '10px' }}>
                          <button
                            className="btn btn-primary"
                            onClick={() => {
                              if (isRecording) { 
                                stopSpeakingRecording(); 
                              } else { 
                                startSpeakingRecording(); 
                              }
                            }}
                            disabled={isProcessingSpeech}
                            style={{ display:'inline-flex', alignItems:'center', gap:8 }}
                          >
                            {isRecording ? <Square className="icon" /> : <Mic className="icon" />}
                            {isRecording ? 'Kaydƒ± Durdur' : 'Kayƒ±t Yap'}
                          </button>
                          
                          {isProcessingSpeech && <span style={{ color:'#666' }}>Ses i≈üleniyor...</span>}
                        </div>
                      </div>
                      
                      {/* Navigasyon butonlarƒ± */}
                      <div style={{ display: 'flex', gap: '10px', marginTop: '20px' }}>
                        <button
                          className="btn btn-outline"
                          onClick={() => setCurrentSpeakingQuestion(prev => Math.max(0, prev - 1))}
                          disabled={currentSpeakingQuestion === 0}
                        >
                          ‚Üê √ñnceki Soru
                        </button>
                        
                        <button
                          className="btn btn-primary"
                          onClick={() => setCurrentSpeakingQuestion(prev => Math.min(speakingQuestions.part1.length - 1, prev + 1))}
                          disabled={currentSpeakingQuestion === speakingQuestions.part1.length - 1}
                        >
                          Sonraki Soru ‚Üí
                        </button>
                      </div>
                    </div>
                  )}

                  {speakingPart === 2 && (
                    <div className="card" style={{ marginTop: 10 }}>
                      <h4>Part 2: Long Turn (Cue Card)</h4>
                      
                      <div style={{ marginBottom: '15px', textAlign: 'center' }}>
                        <h4 style={{ color: '#8B5CF6', margin: '0 0 10px 0' }}>
                          üéß Part 2 - Cue Card
                        </h4>
                        <p style={{ color: '#666', fontSize: '14px', margin: '0 0 15px 0' }}>
                          A≈üaƒüƒ±daki butona tƒ±klayarak konuyu dinleyin ve 2 dakika konu≈üun
                        </p>
                      </div>
                      
                      {/* Ses oynatma butonu */}
                      <div style={{ textAlign: 'center', marginBottom: '20px' }}>
                        <button
                          className="btn btn-primary"
                          onClick={() => {
                            const audioUrl = speakingQuestions.part2.audioUrl;
                            if (!audioUrl || audioUrl.trim() === '') {
                              alert('Ses dosyasƒ± hen√ºz hazƒ±r deƒüil. L√ºtfen sayfayƒ± yenileyin ve tekrar deneyin.');
                              return;
                            }
                            
                            const audio = new Audio(audioUrl);
                            audio.onerror = (e) => {
                              console.error('Audio playback error:', e);
                              alert('Ses √ßalarken hata olu≈ütu. L√ºtfen tekrar deneyin.');
                            };
                            audio.play().catch((e) => {
                              console.error('Audio play error:', e);
                              alert('Ses √ßalarken hata olu≈ütu. L√ºtfen tekrar deneyin.');
                            });
                          }}
                          style={{ 
                            padding: '15px 30px', 
                            fontSize: '16px',
                            background: '#8B5CF6',
                            color: 'white',
                            border: 'none',
                            borderRadius: '25px',
                            cursor: 'pointer'
                          }}
                        >
                          üîä Cue Card'ƒ± Dinle
                        </button>
                      </div>
                      
                      {/* Cevap textarea */}
                      <div style={{ marginBottom: '10px' }}>
                        <p style={{ fontSize: '14px', color: '#666', margin: '0 0 8px 0' }}>
                          üí° <strong>Konu≈üamƒ±yorsanƒ±z buraya yazabilirsiniz</strong>
                        </p>
                      </div>
                      <textarea
                        value={speakingAnswers.part2}
                        onChange={(e) => {
                          setSpeakingAnswers(prev => ({ ...prev, part2: e.target.value }));
                        }}
                        placeholder="Cevabƒ±nƒ±zƒ± buraya yazƒ±n veya kayƒ±t yapƒ±n"
                        style={{ width:'100%', minHeight: 150, padding: 12, border:'1px solid #e0e0e0', borderRadius: 8, background:'#ffffff' }}
                      />
                      
                      {/* Kayƒ±t butonu */}
                      <div style={{ marginTop: '15px', display: 'flex', gap: '10px' }}>
                        <button
                          className="btn btn-primary"
                          onClick={() => {
                            if (isRecording) { 
                              stopSpeakingRecording(); 
                            } else { 
                              startSpeakingRecording(); 
                            }
                          }}
                          disabled={isProcessingSpeech}
                          style={{ display:'inline-flex', alignItems:'center', gap:8 }}
                        >
                          {isRecording ? <Square className="icon" /> : <Mic className="icon" />}
                          {isRecording ? 'Kaydƒ± Durdur' : 'Kayƒ±t Yap'}
                        </button>
                        
                        {isProcessingSpeech && <span style={{ color:'#666' }}>Ses i≈üleniyor...</span>}
                      </div>
                    </div>
                  )}

                  {speakingPart === 3 && (
                    <div className="card" style={{ marginTop: 10 }}>
                      <h4>Part 3: Discussion</h4>
                      <p style={{ color: '#666', marginBottom: '20px' }}>
                        Soru {currentSpeakingQuestion + 1} / {speakingQuestions.part3.length}
                      </p>
                      
                      <div style={{ marginBottom: '20px' }}>
                        <div style={{ marginBottom: '15px', textAlign: 'center' }}>
                          <h4 style={{ color: '#8B5CF6', margin: '0 0 10px 0' }}>
                            üéß Part 3 - Soru {currentSpeakingQuestion + 1}
                          </h4>
                          <p style={{ color: '#666', fontSize: '14px', margin: '0 0 15px 0' }}>
                            A≈üaƒüƒ±daki butona tƒ±klayarak soruyu dinleyin ve cevaplayƒ±n
                          </p>
                        </div>
                        
                        {/* Ses oynatma butonu */}
                        <div style={{ textAlign: 'center', marginBottom: '20px' }}>
                          <button
                            className="btn btn-primary"
                          onClick={() => {
                            const audioUrl = speakingQuestions.part3[currentSpeakingQuestion].audioUrl;
                            if (!audioUrl || audioUrl.trim() === '') {
                              alert('Ses dosyasƒ± hen√ºz hazƒ±r deƒüil. L√ºtfen sayfayƒ± yenileyin ve tekrar deneyin.');
                              return;
                            }
                            
                            const audio = new Audio(audioUrl);
                            audio.onerror = (e) => {
                              console.error('Audio playback error:', e);
                              alert('Ses √ßalarken hata olu≈ütu. L√ºtfen tekrar deneyin.');
                            };
                            audio.play().catch((e) => {
                              console.error('Audio play error:', e);
                              alert('Ses √ßalarken hata olu≈ütu. L√ºtfen tekrar deneyin.');
                            });
                          }}
                            style={{ 
                              padding: '15px 30px', 
                              fontSize: '16px',
                              background: '#8B5CF6',
                              color: 'white',
                              border: 'none',
                              borderRadius: '25px',
                              cursor: 'pointer'
                            }}
                          >
                            üîä Soruyu Dinle
                          </button>
                        </div>
                        
                        {/* Cevap textarea */}
                        <div style={{ marginBottom: '10px' }}>
                          <p style={{ fontSize: '14px', color: '#666', margin: '0 0 8px 0' }}>
                            üí° <strong>Konu≈üamƒ±yorsanƒ±z buraya yazabilirsiniz</strong>
                          </p>
                        </div>
                        <textarea
                          value={speakingAnswers.part3[currentSpeakingQuestion] || ''}
                          onChange={(e) => {
                            setSpeakingAnswers(prev => ({
                              ...prev,
                              part3: prev.part3.map((answer, i) => 
                                i === currentSpeakingQuestion ? e.target.value : answer
                              )
                            }));
                          }}
                          placeholder="Cevabƒ±nƒ±zƒ± buraya yazƒ±n veya kayƒ±t yapƒ±n"
                          style={{ width:'100%', minHeight: 120, padding: 12, border:'1px solid #e0e0e0', borderRadius: 8, background:'#ffffff' }}
                        />
                        
                        {/* Kayƒ±t butonu */}
                        <div style={{ marginTop: '15px', display: 'flex', gap: '10px' }}>
                          <button
                            className="btn btn-primary"
                            onClick={() => {
                              if (isRecording) { 
                                stopSpeakingRecording(); 
                              } else { 
                                startSpeakingRecording(); 
                              }
                            }}
                            disabled={isProcessingSpeech}
                            style={{ display:'inline-flex', alignItems:'center', gap:8 }}
                          >
                            {isRecording ? <Square className="icon" /> : <Mic className="icon" />}
                            {isRecording ? 'Kaydƒ± Durdur' : 'Kayƒ±t Yap'}
                          </button>
                          
                          {isProcessingSpeech && <span style={{ color:'#666' }}>Ses i≈üleniyor...</span>}
                        </div>
                      </div>
                      
                      {/* Navigasyon butonlarƒ± */}
                      <div style={{ display: 'flex', gap: '10px', marginTop: '20px' }}>
                        <button
                          className="btn btn-outline"
                          onClick={() => setCurrentSpeakingQuestion(prev => Math.max(0, prev - 1))}
                          disabled={currentSpeakingQuestion === 0}
                        >
                          ‚Üê √ñnceki Soru
                        </button>
                        
                        <button
                          className="btn btn-primary"
                          onClick={() => setCurrentSpeakingQuestion(prev => Math.min(speakingQuestions.part3.length - 1, prev + 1))}
                          disabled={currentSpeakingQuestion === speakingQuestions.part3.length - 1}
                        >
                          Sonraki Soru ‚Üí
                        </button>
                      </div>
                    </div>
                  )}
                  
                  {/* Deƒüerlendirme B√∂l√ºm√º */}
                  <div className="card" style={{ marginTop: '20px', textAlign: 'center' }}>
                    <h4>üìä Speaking Test Deƒüerlendirmesi</h4>
                    <p style={{ color: '#666', marginBottom: '20px' }}>
                      T√ºm cevaplarƒ±nƒ±zƒ± verdikten sonra deƒüerlendirme yapabilirsiniz.
                    </p>
                    
                    <button
                      className="btn btn-success"
                      onClick={evaluateSpeakingTest}
                      disabled={speakingEvaluating || (!speakingAnswers.part1.some(a => a.trim()) && !speakingAnswers.part2.trim() && !speakingAnswers.part3.some(a => a.trim()))}
                      style={{ fontSize: '16px', padding: '12px 24px' }}
                    >
                      {speakingEvaluating ? 'Deƒüerlendiriliyor...' : 'üéØ Speaking Testini Deƒüerlendir'}
                    </button>
                    
                    {speakingError && (
                      <div className="error-message" style={{ marginTop: '15px', color: '#d33' }}>
                        ‚ùå {speakingError}
                      </div>
                    )}
                  </div>
                  
                  {/* Speaking Test Tamamlandƒ± Mesajƒ± */}
                  {speakingEvaluation && !moduleCompletion.speaking && (
                    <div style={{ textAlign: 'center', marginTop: '20px' }}>
                      <button 
                        className="btn btn-primary" 
                        onClick={() => setModuleCompletion(prev => ({ ...prev, speaking: true }))}
                        style={{
                          background: '#8B5CF6',
                          color: 'white',
                          padding: '15px 30px',
                          fontSize: '18px',
                          fontWeight: 'bold',
                          borderRadius: '25px',
                          border: 'none',
                          cursor: 'pointer'
                        }}
                      >
                        ‚úÖ Testi Tamamla
                      </button>
                    </div>
                  )}
                  
                  {moduleCompletion.speaking && (
                    <div style={{ textAlign: 'center', marginTop: '20px' }}>
                      <div style={{
                        background: 'linear-gradient(135deg, #4CAF50 0%, #45a049 100%)',
                        color: 'white',
                        padding: '15px',
                        borderRadius: '10px',
                        marginBottom: '15px'
                      }}>
                        <h4 style={{ margin: '0 0 5px 0', fontSize: '18px' }}>‚úÖ Speaking Mod√ºl√º Tamamlandƒ±</h4>
                        <p style={{ margin: 0, fontSize: '14px', opacity: 0.9 }}>
                          Test ba≈üarƒ±yla tamamlandƒ±
                        </p>
                      </div>
                    </div>
                  )}
                </div>
              )}
            </div>
          ) : (
            <div className="coming-soon">
              <h3>üöß Mod√ºl Geli≈ütiriliyor</h3>
              <p>
                Bu mod√ºl hen√ºz geli≈ütirilme a≈üamasƒ±ndadƒ±r. 
                Ger√ßek sƒ±nav deneyimi i√ßin ilgili mod√ºl sayfasƒ±ndan pratik yapabilirsiniz.
              </p>
              
              <div className="module-links">
                <Link to={`/${steps[currentStep].name.toLowerCase()}`} className="btn btn-primary">
                  {steps[currentStep].name} Mod√ºl√ºne Git
                </Link>
              </div>
            </div>
          )}
        </div>

        {/* Mod√ºl Navigasyonu */}
        <div className="module-navigation">
          <button 
            className="btn btn-secondary"
            onClick={prevStep}
            disabled={currentStep === 0}
          >
            ‚Üê √ñnceki Mod√ºl
          </button>
          
          <div className="module-indicator">
            <span className="current-module">{steps[currentStep].name}</span>
            <span className="module-counter">{currentStep + 1} / {steps.length}</span>
          </div>
          
          <button 
            className="btn btn-primary"
            onClick={nextStep}
            disabled={currentStep === steps.length - 1}
          >
            Sonraki Mod√ºl ‚Üí
          </button>
        </div>
        
        {/* T√ºm Mod√ºller Tamamlandƒ±ƒüƒ±nda Sƒ±navƒ± Tamamla Butonu */}
        {Object.values(moduleCompletion).every(completed => completed) && (
          <div style={{ textAlign: 'center', marginTop: '30px' }}>
            <div style={{
              background: 'linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%)',
              color: 'white',
              padding: '25px',
              borderRadius: '15px',
              marginBottom: '20px',
              boxShadow: '0 10px 30px rgba(139, 92, 246, 0.3)'
            }}>
              <h3 style={{ margin: '0 0 10px 0', fontSize: '24px' }}>
                üéâ T√ºm Mod√ºller Tamamlandƒ±!
              </h3>
              <p style={{ margin: 0, fontSize: '16px', opacity: 0.9 }}>
                IELTS deneme sƒ±navƒ±nƒ±zƒ± ba≈üarƒ±yla tamamladƒ±nƒ±z. ≈ûimdi genel sonu√ßlarƒ±nƒ±zƒ± g√∂r√ºnt√ºleyebilirsiniz.
              </p>
      </div>
            
            <button 
              className="btn btn-primary" 
              onClick={() => setShowTestEvaluation(true)}
              style={{
                background: '#10b981',
                color: 'white',
                padding: '18px 40px',
                fontSize: '20px',
                fontWeight: 'bold',
                borderRadius: '30px',
                border: 'none',
                cursor: 'pointer',
                boxShadow: '0 8px 25px rgba(16, 185, 129, 0.3)',
                transition: 'all 0.3s ease'
              }}
            >
              üìä Sƒ±navƒ± Tamamla ve Sonu√ßlarƒ± G√∂r√ºnt√ºle
            </button>
          </div>
        )}
      </div>
      
      {/* Test Evaluation Modal */}
      {showTestEvaluation && (
        <TestEvaluation
          readingResult={readingResult}
          readingTest={readingTest}
          readingAnswers={readingAnswers}
          writingResults={writingResults}
          speakingEvaluation={speakingEvaluation}
          listeningResult={listeningResult}
          listeningTest={listeningContent}
          listeningAnswers={answers}
          onBack={() => setShowTestEvaluation(false)}
        />
      )}
    </div>
  );
};

export default GeneralTestPage;